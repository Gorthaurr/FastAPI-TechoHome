name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'scripts/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/deploy-backend.yml'

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: technofame-api
  SERVICE_NAME: api

  # ВАЖНО: используем только override как актуальный compose-файл
  COMPOSE_FILES: /opt/apps/backend/scripts/docker-compose.override.yml

  # Для публичной проверки через реверс-прокси/HTTPS
  PUBLIC_HEALTH_URL: https://api.technofame.store/healthz

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: backend-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image ref (lowercase owner)
        id: meta
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner_lc=$OWNER_LC" >> "$GITHUB_OUTPUT"
          echo "image=${{ env.REGISTRY }}/${OWNER_LC}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"

      - name: Docker metadata (tags + labels)
        id: dmeta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.meta.outputs.image }}
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=tag
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repository }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Пушим по тегам, но деплоим по digest (без push-by-digest, чтобы не конфликтовать с tags)
      - name: Build & Push image (by tags)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.dmeta.outputs.tags }}
          labels: ${{ steps.dmeta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # platforms: linux/amd64

      - name: Show image digest
        run: |
          echo "Image:  ${{ steps.meta.outputs.image }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"

      # ================== DEPLOY ==================
      - name: Deploy on server (pull image@digest + recreate)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail

            IMAGE="${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}"
            SERVICE="${{ env.SERVICE_NAME }}"
            COMPOSE_FILES_RAW="${{ env.COMPOSE_FILES }}"

            # Разворачиваем COMPOSE_FILES="a:b:c" в args "-f a -f b -f c"
            IFS=':' read -r -a CF_ARR <<< "$COMPOSE_FILES_RAW"
            COMPOSE_ARGS=""
            echo "[deploy] Compose files in use:"
            for f in "${CF_ARR[@]}"; do
              echo "  - $f"
              [ -f "$f" ] || { echo "ERROR: compose file not found: $f"; exit 2; }
              COMPOSE_ARGS="$COMPOSE_ARGS -f $f"
            done

            # ---- SUDO DETECT ----
            SUDO=""
            if docker info >/dev/null 2>&1; then
              SUDO=""
            elif sudo -n docker info >/dev/null 2>&1; then
              SUDO="sudo -n "
            else
              echo "ERROR: No permission to access Docker daemon. Add user to 'docker' group or allow passwordless sudo."
              exit 1
            fi

            # ---- COMPOSE DETECT ----
            if ${SUDO}docker compose version >/dev/null 2>&1; then
              COMPOSE="${SUDO}docker compose"
            elif ${SUDO}docker-compose version >/dev/null 2>&1; then
              COMPOSE="${SUDO}docker-compose"
            else
              echo "ERROR: docker compose not found"
              exit 1
            fi

            echo "[deploy] Pull image by digest: ${IMAGE}"
            ${SUDO}docker pull "${IMAGE}"

            # Временный override для фиксации exact digest на этот релиз
            TMP_OVERRIDE="$(mktemp)"
            cat > "${TMP_OVERRIDE}" <<EOF
services:
  ${SERVICE}:
    image: ${IMAGE}
EOF

            echo "[deploy] Using override file: ${TMP_OVERRIDE}"
            set -x
            ${COMPOSE} ${COMPOSE_ARGS} -f "${TMP_OVERRIDE}" up -d --force-recreate "${SERVICE}"
            set +x
            rm -f "${TMP_OVERRIDE}"

            echo "[deploy] ps:"
            ${COMPOSE} ${COMPOSE_ARGS} ps || true

            echo "[deploy] last logs (tail 120):"
            ${COMPOSE} ${COMPOSE_ARGS} logs --no-color -n 120 "${SERVICE}" || true

      # ЛОКАЛЬНЫЙ health-check: узнаём проброшенный порт (по умолчанию 8000 в контейнере; поменяй при необходимости)
      - name: Container health check (server localhost via mapped port)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail

            SERVICE="${{ env.SERVICE_NAME }}"
            TARGET_CONTAINER_PORT=8000

            COMPOSE_FILES_RAW="${{ env.COMPOSE_FILES }}"
            IFS=':' read -r -a CF_ARR <<< "$COMPOSE_FILES_RAW"
            COMPOSE_ARGS=""
            for f in "${CF_ARR[@]}"; do
              COMPOSE_ARGS="$COMPOSE_ARGS -f $f"
            done

            SUDO=""
            if docker info >/dev/null 2>&1; then
              SUDO=""
            elif sudo -n docker info >/dev/null 2>&1; then
              SUDO="sudo -n "
            else
              echo "ERROR: No permission to access Docker daemon."
              exit 1
            fi
            if ${SUDO}docker compose version >/dev/null 2>&1; then
              COMPOSE="${SUDO}docker compose"
            elif ${SUDO}docker-compose version >/dev/null 2>&1; then
              COMPOSE="${SUDO}docker-compose"
            else
              echo "ERROR: docker compose not found"
              exit 1
            fi

            HOST_PORT="$(${COMPOSE} ${COMPOSE_ARGS} port "${SERVICE}" ${TARGET_CONTAINER_PORT} 2>/dev/null | tail -n1 | awk -F: '{print $NF}')"
            if [ -z "${HOST_PORT:-}" ]; then
              echo "WARN: can't detect mapped port for ${SERVICE}/${TARGET_CONTAINER_PORT}, fallback to 127.0.0.1:${TARGET_CONTAINER_PORT}"
              HOST_PORT="${TARGET_CONTAINER_PORT}"
            fi
            URL="http://127.0.0.1:${HOST_PORT}/healthz"
            echo "[health] probing ${URL}"

            for i in {1..24}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
              echo "Attempt $i: $URL -> HTTP $code"
              if [ "$code" = "200" ]; then
                exit 0
              fi
              sleep 5
            done
            echo "Local container health check failed"
            exit 1

      # ПУБЛИЧНЫЙ health-check через реверс-прокси/HTTPS
      - name: Public HTTPS health check
        run: |
          set -euo pipefail
          url="${{ env.PUBLIC_HEALTH_URL }}"
          for i in {1..24}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$url" || true)
            echo "Attempt $i: $url -> HTTP $code"
            if [ "$code" = "200" ]; then
              exit 0
            fi
            sleep 5
          done
          echo "Public health check failed"
          exit 1
