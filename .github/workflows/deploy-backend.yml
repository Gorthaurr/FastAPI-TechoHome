name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'scripts/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/deploy-backend.yml'

permissions:
  contents: read
  packages: write

env:
  TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # GHCR требует нижний регистр в пути образа
      - name: Compute image name (lowercase)
        id: meta
        shell: bash
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/technofame-api"
          echo "lower=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.lower }}:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # На сервере должен существовать bash-скрипт /opt/deploy/deploy_api.sh
      # (с шебангом #!/usr/bin/env bash и правами +x), который делает
      # docker compose up -d --force-recreate api
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            sudo -n /opt/deploy/deploy_api.sh

      # Мини-ретрай для healthz без доступа к docker socket на сервере
      - name: Post-deploy health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            for i in {1..12}; do
              code=$(curl -sk -o /dev/null -w "%{http_code}" https://api.technofame.store/healthz || true)
              echo "Attempt $i: /healthz -> HTTP $code"
              if [ "$code" = "200" ]; then
                exit 0
              fi
              sleep 5
            done
            echo "Health check failed"
            exit 1
