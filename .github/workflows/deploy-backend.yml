name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'scripts/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/deploy-backend.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    env:
      TAG: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Compute image name (lowercase)
        id: meta
        shell: bash
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/technofame-api"
          echo "lower=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        env:
          IMG: ${{ steps.meta.outputs.lower }}
        with:
          context: .
          file: ./Dockerfile
          push: true
          no-cache: true
          tags: |
            ${{ env.IMG }}:${{ env.TAG }}
            ${{ env.IMG }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            sudo -n /opt/deploy/deploy_api.sh

      - name: Post-deploy quick checks
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
            # Проверим версии внутри контейнера (bcrypt/passlib)
            docker exec -i scripts-api-1 python - <<'PY'
import importlib.metadata as m
def v(p):
    try: print(p, m.version(p))
    except Exception as e: print(p, "?", e)
v("bcrypt"); v("passlib"); 
PY
            # healthz
            code=$(curl -sk -o /dev/null -w "%{http_code}" https://api.technofame.store/healthz)
            echo "healthz: $code"
            test "$code" = "200"
