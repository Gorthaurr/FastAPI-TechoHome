#!/usr/bin/env python3
"""
–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.
"""

import sys
import os
import json
import requests
from io import BytesIO
from PIL import Image
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class QualityImageParser:
    """–ü–∞—Ä—Å–µ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        })

        # –ë–∞–∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        self.product_images = {
            # iPhone –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ)
            'iphone': [
                'https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/iphone-15-pro-max-blue-titanium-select?wid=940&hei=1112&fmt=png-alpha&.v=1693009278906',
                'https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/iphone-15-pro-finish-select-202309-6-1inch-bluetitanium?wid=2560&hei=1440&fmt=p-jpg&qlt=95&.v=1692846363993',
                'https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/iphone-15-pro-model-unselect-gallery-2-202309?wid=2560&hei=1440&fmt=p-jpg&qlt=95&.v=1693009279096',
                'https://m.media-amazon.com/images/I/81SigpJN1KL._AC_SL1500_.jpg',
                'https://m.media-amazon.com/images/I/71657TiFeHL._AC_SL1500_.jpg',
            ],
            
            # MacBook –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ)
            'macbook': [
                'https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/macbook-air-midnight-select-20220606?wid=904&hei=840&fmt=jpeg&qlt=90&.v=1653084303665',
                'https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/mba15-midnight-select-202306?wid=904&hei=840&fmt=jpeg&qlt=90&.v=1684518479433',
                'https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/macbook-air-gallery3-20220606?wid=2000&hei=1536&fmt=jpeg&qlt=95&.v=1653088211257',
                'https://m.media-amazon.com/images/I/71TPda7cwUL._AC_SL1500_.jpg',
                'https://m.media-amazon.com/images/I/71f5Eu5lJSL._AC_SL1500_.jpg',
            ],
            
            # Sony –Ω–∞—É—à–Ω–∏–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ)
            'sony': [
                'https://m.media-amazon.com/images/I/51aXvjzcukL._AC_SL1000_.jpg',
                'https://m.media-amazon.com/images/I/61vJtKbAssL._AC_SL1500_.jpg',
                'https://m.media-amazon.com/images/I/61Bq8t2dMvL._AC_SL1500_.jpg',
                'https://m.media-amazon.com/images/I/61k-Q3XTQPL._AC_SL1500_.jpg',
                'https://m.media-amazon.com/images/I/71o8Q5XJS5L._AC_SL1500_.jpg',
            ],
            
            # Samsung —Ç–µ–ª–µ—Ñ–æ–Ω—ã
            'samsung': [
                'https://m.media-amazon.com/images/I/71lD7eGdW-L._AC_SL1500_.jpg',
                'https://m.media-amazon.com/images/I/71qGismu6NL._AC_SL1500_.jpg',
                'https://m.media-amazon.com/images/I/71PGQqyI4UL._AC_SL1500_.jpg',
                'https://m.media-amazon.com/images/I/61Y9I6c+T9L._AC_SL1500_.jpg',
            ],
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
            'default': [
                'https://m.media-amazon.com/images/I/71gm8v4uPBL._AC_SL1500_.jpg',  # iPad
                'https://m.media-amazon.com/images/I/71ey-9D8yDL._AC_SL1500_.jpg',  # AirPods
                'https://m.media-amazon.com/images/I/71GLMJ7TQiL._AC_SL1500_.jpg',  # Watch
                'https://m.media-amazon.com/images/I/81thV7SoLZL._AC_SL1500_.jpg',  # Laptop
                'https://m.media-amazon.com/images/I/71bhWgQK-cL._AC_SL1500_.jpg',  # Headphones
            ]
        }

    def get_product_images(self, product_name: str, num_images: int = 3) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞."""
        product_lower = product_name.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
        if 'iphone' in product_lower or '–∞–π—Ñ–æ–Ω' in product_lower:
            images = self.product_images['iphone']
        elif 'macbook' in product_lower or 'mac' in product_lower or '–º–∞–∫–±—É–∫' in product_lower:
            images = self.product_images['macbook']
        elif 'sony' in product_lower or 'wh-' in product_lower or '–Ω–∞—É—à–Ω–∏–∫–∏' in product_lower or 'headphone' in product_lower:
            images = self.product_images['sony']
        elif 'samsung' in product_lower or 'galaxy' in product_lower or '—Å–∞–º—Å—É–Ω–≥' in product_lower:
            images = self.product_images['samsung']
        else:
            images = self.product_images['default']
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return images[:num_images]

    def download_image(self, url: str) -> Optional[BytesIO]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL."""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url[:50]}...")
            
            response = self.session.get(url, timeout=30, stream=True)
            response.raise_for_status()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = BytesIO()
            total_size = 0
            
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    image_data.write(chunk)
                    total_size += len(chunk)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (–º–∞–∫—Å 10MB)
                    if total_size > 10 * 1024 * 1024:
                        print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {total_size} –±–∞–π—Ç")
                        return None
            
            if total_size < 10000:  # –ú–∏–Ω–∏–º—É–º 10KB
                print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {total_size} –±–∞–π—Ç")
                return None
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_size:,} –±–∞–π—Ç")
            image_data.seek(0)
            return image_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    def optimize_and_save_image(self, image_data: BytesIO, filename: str) -> bool:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        try:
            image_data.seek(0)
            
            with Image.open(image_data) as img:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
                width, height = img.size
                print(f"üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode not in ('RGB', 'RGBA'):
                    img = img.convert('RGB')
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
                max_width, max_height = 1200, 800
                if width > max_width or height > max_height:
                    ratio = min(max_width / width, max_height / height)
                    new_width = int(width * ratio)
                    new_height = int(height * ratio)
                    img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                    print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω —Ä–∞–∑–º–µ—Ä: {new_width}x{new_height}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                filepath = f"./demo_images/{filename}"
                img.save(filepath, 'JPEG', quality=90, optimize=True)
                
                file_size = os.path.getsize(filepath)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath} ({file_size:,} –±–∞–π—Ç)")
                print(f"   üìÇ –ü—É—Ç—å: {os.path.abspath(filepath)}")
                
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def process_product(self, product_name: str, num_images: int = 2) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
        print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: '{product_name}'")
        print("-" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_urls = self.get_product_images(product_name, num_images)
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(image_urls)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        saved_count = 0
        
        for i, url in enumerate(image_urls, 1):
            print(f"\n[{i}/{len(image_urls)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = self.download_image(url)
            
            if image_data:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                safe_name = "".join(c for c in product_name if c.isalnum() or c in (' ', '-')).rstrip()
                safe_name = safe_name.replace(' ', '_')
                filename = f"{safe_name}_{i}.jpg"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                if self.optimize_and_save_image(image_data, filename):
                    saved_count += 1
            else:
                print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {saved_count}/{num_images}")
        return saved_count


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ü–ê–†–°–ï–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –¢–û–í–ê–†–û–í")
    print("=" * 60)
    print("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("üéØ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    print()
    
    parser = QualityImageParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    test_products = [
        "iPhone 15 Pro Max",
        "MacBook Air M3",
        "Sony WH-1000XM5",
        "Samsung Galaxy S24",
        "iPad Pro"
    ]
    
    total_saved = 0
    
    for product in test_products:
        saved = parser.process_product(product, num_images=2)
        total_saved += saved
    
    print("\n" + "=" * 60)
    print("üéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_saved}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    demo_dir = "./demo_images"
    if os.path.exists(demo_dir):
        files = [f for f in os.listdir(demo_dir) if f.endswith('.jpg')]
        if files:
            print("\nüìÇ –°–û–•–†–ê–ù–ï–ù–ù–´–ï –§–ê–ô–õ–´:")
            for file in sorted(files):
                filepath = os.path.join(demo_dir, file)
                size = os.path.getsize(filepath)
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
                try:
                    with Image.open(filepath) as img:
                        width, height = img.size
                        print(f"   üìÑ {file} ({size:,} –±–∞–π—Ç, {width}x{height})")
                except:
                    print(f"   üìÑ {file} ({size:,} –±–∞–π—Ç)")


if __name__ == "__main__":
    main()
