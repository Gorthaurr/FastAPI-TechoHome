#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ (DrissionPage)

–ö–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:
- –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–∫—Ä—ã—Ç–æ (headless) —Å –Ω–∞–¥—ë–∂–Ω—ã–º–∏ —Ñ–æ–ª–ª–±—ç–∫–∞–º–∏ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ DrissionPage/Chromium.
- –ù–∏–∫–∞–∫–∏—Ö –æ—á–∏—Å—Ç–æ–∫ MinIO/–ë–î/–ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
- –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ —É–∂–µ >= 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫.
- –î–æ–∫–∞—á–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
- –í—Å—è —Ä–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–¥—ë—Ç –≤ –ø–∞–º—è—Ç–∏ (BytesIO); –ù–ò–ö–ê–ö–ò–• –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π 'downloaded_images' –∏–ª–∏ 'html_dumps'.

–®–∞–≥–∏ –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É:
1) –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ –ë–î ‚Äî –≤—ã–¥–∞—á–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∏–Ω–æ–∫
2) –ö–ª–∏–∫–∞–µ–º –ø–ª–∏—Ç–∫—É -> –º–æ–¥–∞–ª–∫–∞
3) –í –º–æ–¥–∞–ª–∫–µ –∂–º—ë–º ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª
4) –ö–∞—á–∞–µ–º —Ñ–∞–π–ª –í –ü–ê–ú–Ø–¢–¨ (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º Referer), –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
5) –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏ –≥—Ä—É–∑–∏–º –≤ MinIO, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Postgres
"""

import sys
import os
import re
import time
import warnings
from io import BytesIO
from datetime import datetime
from typing import List, Optional, Set
from urllib.parse import quote, urljoin, urlparse

import requests
import urllib3
from PIL import Image

# S3 / MinIO
import boto3
from botocore.client import Config
from botocore.exceptions import ClientError

# ---------- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ----------
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

# ---------- –ü—É—Ç–∏/–æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ----------
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('STORAGE_TYPE', 's3')
os.environ.setdefault('DATABASE_URL', 'postgresql+psycopg2://postgres:password@localhost:5433/fastapi_shop')

# ---------- –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ ----------
from app.db.database import SessionLocal
from app.db.models.product import Product
from app.db.models.product_image import ProductImage
from app.services.storage_service import storage_service
from app.core.config import settings

# ---------- DrissionPage ----------
from DrissionPage import ChromiumPage
from DrissionPage import ChromiumOptions
from DrissionPage.common import Settings


# ========================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =========================

def _safe_filename(name: str) -> str:
    return re.sub(r'[^\w\s-]', '', name).strip().replace(' ', '_')


def _is_direct_image_url(url: str) -> bool:
    return bool(re.search(r'\.(jpg|jpeg|png|webp|gif|bmp|tiff)(\?|$)', url, flags=re.I))


def _guess_ext(url: str, content_type: str) -> str:
    u = (url or '').lower()
    if u.endswith('.jpg') or u.endswith('.jpeg'):
        return '.jpg'
    if u.endswith('.png'):
        return '.png'
    if u.endswith('.webp'):
        return '.webp'
    if u.endswith('.gif'):
        return '.gif'
    if u.endswith('.bmp'):
        return '.bmp'
    if u.endswith('.tif') or u.endswith('.tiff'):
        return '.tiff'
    if content_type:
        ct = content_type.lower()
        if 'jpeg' in ct: return '.jpg'
        if 'png'  in ct: return '.png'
        if 'webp' in ct: return '.webp'
        if 'gif'  in ct: return '.gif'
        if 'bmp'  in ct: return '.bmp'
        if 'tiff' in ct: return '.tiff'
    return '.jpg'


def _origin(url: str) -> str:
    p = urlparse(url)
    if not p.scheme or not p.netloc:
        return ''
    return f'{p.scheme}://{p.netloc}/'


# ========================= –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° =========================

class QualityImageParser:
    def __init__(self, min_side: int = 300):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP-—Å–µ—Å—Å–∏–∏, MinIO+Postgres (–∑–∞–ø–∏—Å—å –≤–∫–ª—é—á–µ–Ω–∞), –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞."""
        print("==================================================")
        print("STORAGE SERVICE INITIALIZATION")
        print("==================================================")
        print(f"STORAGE_TYPE: {os.environ.get('STORAGE_TYPE', 'local')}")
        print(f"S3_BUCKET_NAME: {settings.S3_BUCKET_NAME}")
        print(f"S3_ENDPOINT_URL: {settings.S3_ENDPOINT_URL}")
        print(f"Final storage service: {type(storage_service)}")
        print("==================================================")

        Settings.raise_when_ele_not_found = False
        self.page: Optional[ChromiumPage] = None

        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': ('Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                           'AppleWebKit/537.36 (KHTML, like Gecko) '
                           'Chrome/120.0.0.0 Safari/537.36'),
            'Accept': 'image/avif,image/webp,image/apng,image/*,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })

        self.min_side = min_side
        # –í–ê–ñ–ù–û: –Ω–∏–∫–∞–∫–∏—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ‚Äî –≤—Å—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–π—Ç–∞–º–∏ –≤ –ø–∞–º—è—Ç–∏.

    # -------------------- (–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø) –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ --------------------

    def clear_minio_products(self, prefix: str = 'products/'):
        print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ MinIO (—Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤)...")
        try:
            s3 = boto3.client(
                "s3",
                endpoint_url=settings.S3_ENDPOINT_URL,
                aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
                aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
                region_name=settings.AWS_REGION,
                config=Config(s3={'addressing_style': 'path'}, signature_version='s3v4'),
            )
            paginator = s3.get_paginator('list_objects_v2')
            total_deleted = 0
            for page in paginator.paginate(Bucket=settings.S3_BUCKET_NAME, Prefix=prefix):
                if 'Contents' not in page:
                    continue
                objs = [{'Key': obj['Key']} for obj in page['Contents']]
                while objs:
                    batch = objs[:1000]
                    s3.delete_objects(Bucket=settings.S3_BUCKET_NAME, Delete={'Objects': batch, 'Quiet': True})
                    total_deleted += len(batch)
                    objs = objs[1000:]
            if total_deleted:
                print(f"‚úÖ MinIO: —É–¥–∞–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_deleted}")
            else:
                print("üì≠ MinIO: –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ MinIO: {e}")

    def clear_database_images(self):
        print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î product_images (—Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤)...")
        try:
            with SessionLocal() as db:
                before = db.query(ProductImage).count()
                print(f"üìä –í –ë–î –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏: {before}")
                if before == 0:
                    print("üì≠ –û—á–∏—Å—Ç–∫–∞ –ë–î: —É–∂–µ –ø—É—Å—Ç–æ")
                    return
                batch_size = 1000
                deleted_total = 0
                while True:
                    batch = db.query(ProductImage).limit(batch_size).all()
                    if not batch:
                        break
                    for rec in batch:
                        db.delete(rec)
                    db.commit()
                    deleted_total += len(batch)
                    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –±–∞—Ç—á–æ–º: {len(batch)} (–∏—Ç–æ–≥–æ: {deleted_total}/{before})")
                after = db.query(ProductImage).count()
                print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {after}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")

    def clear_local_artifacts(self):
        """–ó–∞–≥–ª—É—à–∫–∞: –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è."""
        print("‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è ‚Äî –æ—á–∏—â–∞—Ç—å –Ω–µ—á–µ–≥–æ.")

    # -------------------- –ë—Ä–∞—É–∑–µ—Ä --------------------

    def init_page(self) -> bool:
        if self.page is None:
            try:
                print("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DrissionPage (headless)...")
                co = ChromiumOptions()

                # 1) –ü—ã—Ç–∞–µ–º—Å—è –≤–∫–ª—é—á–∏—Ç—å headless —á–µ—Ä–µ–∑ "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π" API
                enabled = False
                for m in ('set_headless', 'headless'):
                    if hasattr(co, m):
                        try:
                            getattr(co, m)(True)  # co.set_headless(True) –∏–ª–∏ co.headless(True)
                            enabled = True
                            break
                        except Exception:
                            pass

                # 2) –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                if not enabled:
                    for flag in ('--headless=new', '--headless'):
                        try:
                            # –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –µ—Å—Ç—å set_argument, —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö ‚Äî —Ç–æ–ª—å–∫–æ add_argument –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
                            if hasattr(co, 'set_argument'):
                                co.set_argument(flag)
                                enabled = True
                                break
                        except Exception:
                            continue

                # –î–æ–ø. –Ω–∞–¥—ë–∂–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤/VPS
                for arg in ('--disable-gpu', '--no-sandbox', '--disable-dev-shm-usage', '--window-size=1920,1080'):
                    try:
                        if hasattr(co, 'set_argument'):
                            co.set_argument(arg)
                    except Exception:
                        pass

                self.page = ChromiumPage(co)
                self.page.set.user_agent(self.session.headers['User-Agent'])
                self.page.set.timeouts(base=10)
                print("‚úÖ DrissionPage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å–∫—Ä—ã—Ç)")
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DrissionPage: {e}")
                print("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Chromium/Chrome. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–¥–∞–π—Ç–µ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:")
                print("   co = ChromiumOptions(); co.set_browser_path('/usr/bin/chromium')  # –∑–∞—Ç–µ–º ChromiumPage(co)")
                return False
        return True

    def close_page(self):
        if self.page:
            try:
                self.page.quit()
                self.page = None
                print("‚úÖ DrissionPage –∑–∞–∫—Ä—ã—Ç")
            except Exception:
                pass

    def _dump_html(self, html: str, product_name: str, suffix: str):
        """–ó–∞–≥–ª—É—à–∫–∞: –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º HTML –Ω–∞ –¥–∏—Å–∫."""
        return

    # -------------------- –®–∞–≥ 1: –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫ --------------------

    def open_search_by_name(self, product_name: str) -> str:
        q = quote(product_name)
        url = f"https://yandex.ru/images/search?text={q}"
        print(f"üì° –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–¥–∞—á—É –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∏–Ω–æ–∫: {url}")
        self.page.get(url)
        time.sleep(1.0)
        return url

    # -------------------- –®–∞–≥ 2: –∫–ª–∏–∫ –ø–æ –ø–ª–∏—Ç–∫–µ -> –º–æ–¥–∞–ª–∫–∞ --------------------

    def _wait_modal_opened(self, timeout: float = 4.0) -> bool:
        end = time.time() + timeout
        last_url = None
        while time.time() < end:
            btn = self._find_open_button_element()
            if btn:
                return True

            url = (self.page.url or "").lower()
            if url != last_url:
                last_url = url
                if ('rpt=imageview' in url) or ('rpt=simage' in url) or ('img_url=' in url):
                    return True

            if self._modal_img_element() is not None:
                return True

            time.sleep(0.25)
        return False

    def _modal_img_element(self):
        for sel in [
            'css:.MMImage-Origin img',
            'css:.MMImage img',
            'css:.ImagePreview img',
            'css:.ModalImage img',
        ]:
            try:
                img = self.page.ele(sel, timeout=0.2)
                if img and img.attr('src'):
                    return img
            except Exception:
                continue
        return None

    def _best_modal_img_url(self) -> Optional[str]:
        for sel in [
            'css:.MMImage-Origin img',
            'css:.MMImage img',
            'css:.ImagePreview img',
            'css:.ModalImage img',
            'css:img'
        ]:
            try:
                img = self.page.ele(sel, timeout=0.6)
                if not img:
                    continue
                ss = img.attr('srcset')
                if ss:
                    best_url = None
                    best_w = -1
                    for part in ss.split(','):
                        t = part.strip().split()
                        if not t:
                            continue
                        url = t[0]
                        w = 0
                        if len(t) > 1 and t[1].endswith('w'):
                            try:
                                w = int(t[1][:-1])
                            except Exception:
                                w = 0
                        if url.startswith('http') and w > best_w:
                            best_w, best_url = w, url
                    if best_url:
                        return best_url
                src = img.attr('src')
                if src and src.startswith('http'):
                    return src
            except Exception:
                continue
        return None

    def _find_open_button_element(self):
        try:
            e = self.page.ele('xpath://a[normalize-space()="–û—Ç–∫—Ä—ã—Ç—å"]', timeout=0.3)
            if e: return e
        except Exception: pass
        try:
            e = self.page.ele('xpath://button[normalize-space()="–û—Ç–∫—Ä—ã—Ç—å"]', timeout=0.3)
            if e: return e
        except Exception: pass
        try:
            e = self.page.ele('text:–û—Ç–∫—Ä—ã—Ç—å', timeout=0.3)
            if e: return e
        except Exception: pass
        try:
            els = self.page.eles('css:a[aria-label*="–û—Ç–∫—Ä—ã—Ç—å"],a[title*="–û—Ç–∫—Ä—ã—Ç—å"]') or []
            if els: return els[0]
        except Exception: pass
        return None

    def _click_open_button_and_get_href(self) -> Optional[str]:
        btn = self._find_open_button_element()
        if not btn:
            print("‚ö†Ô∏è  –ù–µ –Ω–∞—à–ª–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª ‚Äî –±—É–¥–µ–º –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –º–æ–¥–∞–ª–∫–∏")
            return None

        href = btn.attr('href') or ''
        if href:
            if href.startswith('//'): href = 'https:' + href
            elif href.startswith('/'): href = urljoin('https://yandex.ru', href)

        try:
            try: btn.scroll.to_see()
            except Exception: pass
            try: btn.click()
            except Exception: btn.click(by_js=True)
            print("‚úÖ –ö–ª–∏–∫ –ø–æ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª: {e}")

        return href or None

    def _open_modal_by_tile_index(self, tile_index: int) -> bool:
        selectors = [
            'css:a.ImagesContentImage-Cover',
            'css:.ImagesContent-Item a[href]',
            'css:.serp-item a[href]',
            'css:img'
        ]
        for sel in selectors:
            try:
                tiles = self.page.eles(sel) or []
                if tile_index >= len(tiles): continue
                t = tiles[tile_index]
                try: t.scroll.to_see()
                except Exception: pass
                try: t.click()
                except Exception: t.click(by_js=True)

                if self._wait_modal_opened(timeout=4.0):
                    print(f"‚úÖ –ú–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ –ø–ª–∏—Ç–∫–µ #{tile_index+1} ({sel})")
                    return True

                print(f"‚ÑπÔ∏è  –ú–æ–¥–∞–ª–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –ø–ª–∏—Ç–∫–µ #{tile_index+1} ({sel})")
                try: self.page.key.press('Escape')
                except Exception: pass
                time.sleep(0.2)

            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∫–ª–∏–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {sel}: {e}")
                continue
        return False

    # -------------------- –®–∞–≥ 4: —Å–∫–∞—á–∞—Ç—å –í –ü–ê–ú–Ø–¢–¨ --------------------

    def _download_to_memory(self, url: str, referer: Optional[str]) -> Optional[BytesIO]:
        headers = self.session.headers.copy()
        if referer:
            headers['Referer'] = referer
        else:
            origin = _origin(url)
            if origin:
                headers['Referer'] = origin

        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å: {url}")
        try:
            resp = self.session.get(url, headers=headers, timeout=25, verify=False, stream=True, allow_redirects=True)
            resp.raise_for_status()
        except requests.RequestException as e:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
            return None

        data = BytesIO(resp.content)
        try:
            with Image.open(data) as im:
                im.load()
                w, h = im.size
                if min(w, h) < self.min_side:
                    print(f"‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {w}x{h} (<{self.min_side})")
                    return None
        except Exception as e:
            print(f"‚ö†Ô∏è  PIL –æ—à–∏–±–∫–∞: {e}")
            return None

        data.seek(0)
        return data

    # -------------------- MinIO + –ë–î --------------------

    def optimize_and_save_image(self, image_data: BytesIO, product_id: str, filename: str) -> Optional[str]:
        try:
            image_data.seek(0)
            with Image.open(image_data) as img:
                if img.mode in ('RGBA', 'P'):
                    img = img.convert('RGB')
                img.thumbnail((800, 600), Image.Resampling.LANCZOS)

                output_buffer = BytesIO()
                img.save(output_buffer, format='JPEG', quality=85, optimize=True)

                storage_path = f"products/{product_id[:12]}/{filename}"
                output_buffer.seek(0)
                success = storage_service.save_file(
                    storage_path,
                    output_buffer,
                    "image/jpeg"
                )
                if not success:
                    print("‚ùå storage_service –≤–µ—Ä–Ω—É–ª False")
                    return None
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ MinIO: {storage_path}")
                return storage_path
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MinIO: {e}")
            return None

    def create_image_record(self, db, product_id: str, storage_path: str,
                            is_primary: bool = False, alt_text: str = "") -> bool:
        try:
            if is_primary:
                existing_primary = db.query(ProductImage).filter(
                    ProductImage.product_id == product_id,
                    ProductImage.is_primary == True
                ).first()
                if existing_primary:
                    is_primary = False

            image_record = ProductImage(
                product_id=product_id,
                path=storage_path,
                filename=os.path.basename(storage_path),
                is_primary=is_primary,
                status="ready",
                alt_text=alt_text or "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                sort_order=0,
                uploaded_at=datetime.utcnow(),
                processed_at=datetime.utcnow()
            )

            db.add(image_record)
            db.flush()
            db.commit()
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î —Å–æ–∑–¥–∞–Ω–∞: ID={image_record.id}, path={storage_path}, primary={is_primary}")
            return True

        except Exception as e:
            db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
            return False

    def _upload_bytes_to_minio_and_record(self, image_data: BytesIO, product, seq: int) -> bool:
        filename = f"img_{seq:03d}.jpg"  # –≤—Å–µ–≥–¥–∞ JPEG
        storage_path = self.optimize_and_save_image(image_data, str(product.id), filename)
        if not storage_path:
            return False

        with SessionLocal() as db:
            ok = self.create_image_record(
                db=db,
                product_id=product.id,
                storage_path=storage_path,
                is_primary=(seq == 1),
                alt_text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product.name}"
            )
        return ok

    # -------------------- –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π —Å—Å—ã–ª–∫–∏ --------------------

    def _largest_img_src_on_page(self) -> Optional[str]:
        try:
            imgs = self.page.eles('css:img') or []
        except Exception:
            imgs = []
        best_url, best_w = None, -1
        for img in imgs:
            try:
                ss = img.attr('srcset')
                if ss:
                    for part in ss.split(','):
                        t = part.strip().split()
                        if not t:
                            continue
                        u = t[0]
                        w = 0
                        if len(t) > 1 and t[1].endswith('w'):
                            try:
                                w = int(t[1][:-1])
                            except Exception:
                                w = 0
                        if u.startswith('http') and w > best_w:
                            best_w, best_url = w, u
                    continue
                src = img.attr('src')
                if src and src.startswith('http') and best_w < 0:
                    best_url = src
                    best_w = 0
            except Exception:
                continue
        return best_url

    # -------------------- –ü–æ–¥—Å—á—ë—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π --------------------

    def _existing_images_count(self, product_id: str) -> int:
        try:
            with SessionLocal() as db:
                return db.query(ProductImage).filter(ProductImage.product_id == product_id).count()
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            return 0

    # -------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –¥–æ–∫–∞—á–∞—Ç—å –¥–æ 3 —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä --------------------

    def process_product(self, product: Product, images_per_product: int = 3) -> int:
        print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: '{product.name}' (ID: {product.id})")
        print("-" * 60)

        if not self.init_page():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            return 0

        existing = self._existing_images_count(product.id)
        if existing >= images_per_product:
            print(f"‚è≠Ô∏è –£–∂–µ –µ—Å—Ç—å {existing} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (‚â• {images_per_product}). –ü—Ä–æ–ø—É—Å–∫ —Ç–æ–≤–∞—Ä–∞.")
            return 0

        need_to_save = images_per_product - existing
        print(f"‚ÑπÔ∏è  –í –ë–î —É–∂–µ: {existing}. –ù—É–∂–Ω–æ –¥–æ–∫–∞—á–∞—Ç—å: {need_to_save}.")

        results_url = self.open_search_by_name(product.name)

        saved = 0
        tried = 0
        tile_index = 0
        downloaded_urls: Set[str] = set()
        max_tile_attempts = need_to_save * 12

        while saved < need_to_save and tried < max_tile_attempts:
            if not (self.page.url or "").startswith("https://yandex.ru/images"):
                self.page.get(results_url)
                time.sleep(0.6)

            opened = self._open_modal_by_tile_index(tile_index)
            tried += 1
            tile_index += 1

            if not opened:
                print("‚ö†Ô∏è  –ü–ª–∏—Ç–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞ –º–æ–¥–∞–ª–∫—É ‚Äî —Å–ª–µ–¥—É—é—â–∞—è")
                continue

            modal_best_url = self._best_modal_img_url()
            open_href = self._click_open_button_and_get_href()

            download_url = None
            referer_for_download = None

            if open_href:
                print(f"‚û°Ô∏è  –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª: {open_href}")
                self.page.get(open_href)
                time.sleep(1.0)
                final_url = self.page.url or ""

                if _is_direct_image_url(final_url):
                    download_url = final_url
                    referer_for_download = _origin(final_url)
                else:
                    largest = self._largest_img_src_on_page()
                    if largest:
                        download_url = largest
                        referer_for_download = self.page.url

            if not download_url and modal_best_url:
                download_url = modal_best_url
                referer_for_download = _origin(modal_best_url) or 'https://yandex.ru/'

            if not download_url:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –ø–ª–∏—Ç–∫–∞")
                self.page.get(results_url)
                time.sleep(0.6)
                continue

            if download_url in downloaded_urls:
                print("‚ÑπÔ∏è  –î—É–±–ª–∏–∫–∞—Ç URL ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                self.page.get(results_url)
                time.sleep(0.6)
                continue

            seq = existing + saved + 1
            print(f"üîó –ë—É–¥–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å (–≤ –ø–∞–º—è—Ç—å): {download_url} -> seq={seq}")

            img_bytes = self._download_to_memory(download_url, referer_for_download)

            self.page.get(results_url)
            time.sleep(0.6)

            if not img_bytes:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤ –ø–∞–º—è—Ç—å ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –ø–ª–∏—Ç–∫–∞")
                continue

            if self._upload_bytes_to_minio_and_record(img_bytes, product, seq=seq):
                saved += 1
                downloaded_urls.add(download_url)
                print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–æ–≤–∞—Ä—É: {existing + saved}/{images_per_product}")
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ MinIO/–∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –ø–ª–∏—Ç–∫–∞")

        print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {saved}/{need_to_save} (–∏—Ç–æ–≥ –≤ –ë–î –±—É–¥–µ—Ç {existing + saved})")
        return saved

    # -------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î --------------------

    def get_products_from_db(self) -> List[Product]:
        try:
            print("üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î...")
            with SessionLocal() as db:
                from sqlalchemy.orm import lazyload
                products = db.query(Product).options(
                    lazyload(Product.attributes),
                    lazyload(Product.images),
                    lazyload(Product.category)
                ).all()
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                return products
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []


# ========================= main =========================

def main():
    print("üöÄ –ü–ê–†–°–ï–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ‚Äî –≤ –ø–∞–º—è—Ç—å ‚Üí MinIO (—Ä–∞–±–æ—á–∏–π –º–µ—Ö–∞–Ω–∏–∑–º) ‚Üí –∑–∞–ø–∏—Å—å –≤ Postgres")
    print("=" * 94)
    print("–®–∞–≥–∏: –ø–æ–∏—Å–∫ ‚Üí –º–æ–¥–∞–ª–∫–∞ ‚Üí ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª ‚Üí –≤ –ø–∞–º—è—Ç—å ‚Üí MinIO ‚Üí –ë–î (–¥–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä)\n")

    parser = QualityImageParser(min_side=300)

    try:
        products = parser.get_products_from_db()
        if not products:
            print("‚ùå –í –ë–î –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return

        images_per_product = 3
        saved_total = 0
        processed = 0

        for product in products:
            try:
                print(f"\nüîÑ –¢–æ–≤–∞—Ä {processed + 1}/{len(products)}")
                saved = parser.process_product(product, images_per_product=images_per_product)
                saved_total += saved
                processed += 1
                time.sleep(0.4)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product.name}: {e}")
                continue

        print("\nüéâ –ì–û–¢–û–í–û")
        print("=" * 50)
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed}")
        print(f"üì∏ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {saved_total}")

    finally:
        parser.close_page()
        print("‚úÖ DrissionPage –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    main()
