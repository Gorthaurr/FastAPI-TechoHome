#!/usr/bin/env python3
"""
–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DrissionPage.
–ò—â–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Google Images –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞.
"""

import sys
import os
import json
import requests
from io import BytesIO
from PIL import Image
from typing import Dict, List, Optional
from sqlalchemy.orm import Session
from sqlalchemy import select, text
import warnings
import urllib3
import time
import random
import re
from datetime import datetime

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º STORAGE_TYPE –≤ s3 –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
os.environ['STORAGE_TYPE'] = 's3'

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Docker –ë–î –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–π
os.environ['DATABASE_URL'] = 'postgresql+psycopg2://postgres:password@localhost:5433/fastapi_shop'

from app.db.database import SessionLocal
from app.db.models.product import Product
from app.db.models.product_image import ProductImage
from app.services.storage_service import storage_service
from app.core.config import settings
import boto3
from botocore.exceptions import ClientError

# DrissionPage –∏–º–ø–æ—Ä—Ç—ã
from DrissionPage import ChromiumPage
from DrissionPage.common import Settings


class QualityImageParser:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å DrissionPage."""
        print("==================================================")
        print("STORAGE SERVICE INITIALIZATION")
        print("==================================================")
        print(f"STORAGE_TYPE: {os.environ.get('STORAGE_TYPE', 'local')}")
        print(f"S3_BUCKET_NAME: {settings.S3_BUCKET_NAME}")
        print(f"S3_ENDPOINT_URL: {settings.S3_ENDPOINT_URL}")
        print("Creating S3StorageProvider...")
        print(f"‚úÖ S3StorageProvider created successfully")
        print(f"Final storage service: {type(storage_service)}")
        print("==================================================")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DrissionPage
        Settings.raise_when_ele_not_found = False
        
        self.page = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ requests —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })

    def init_page(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DrissionPage."""
        if self.page is None:
            try:
                print("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DrissionPage...")
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                self.page = ChromiumPage()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
                self.page.set.user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
                
                print("‚úÖ DrissionPage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DrissionPage: {e}")
                return False
        return True

    def close_page(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ DrissionPage."""
        if self.page:
            try:
                self.page.quit()
                self.page = None
                print("‚úÖ DrissionPage –∑–∞–∫—Ä—ã—Ç")
            except:
                pass

    def search_yandex_images(self, product_name: str, num_images: int = 3) -> List[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Yandex Images —Å –ø–æ–º–æ—â—å—é DrissionPage."""
        if not self.init_page():
            return []
            
        print(f"üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Yandex –¥–ª—è: {product_name}")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_query = f"{product_name} —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ —Ñ–æ—Ç–æ"
            
            # URL Yandex Images —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            url = f"https://yandex.ru/images/search?text={search_query}&isize=wallpaper"
            
            print(f"üì° –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {url}")
            self.page.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(3)
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_urls = []
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            img_items = self.page.eles('css:.serp-item')
            
            print(f"üñºÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(img_items)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
            
            for i, item in enumerate(img_items[:num_images * 2]):  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                try:
                    print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç {i+1}...")
                    
                    # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                    thumbnail = item.ele('css:img')
                    if thumbnail:
                        thumbnail.click()
                        print("üëÜ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—É")
                        time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                        
                        # –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                        selectors = [
                            'css:.MMImage-Origin img',
                            'css:.ContentImage img', 
                            'css:.MMImage img',
                            'css:.image-viewer img',
                            'css:.preview-image img'
                        ]
                        
                        original_img = None
                        for selector in selectors:
                            original_img = self.page.ele(selector)
                            if original_img:
                                break
                        
                        if original_img:
                            img_url = original_img.attr('src')
                            
                            if img_url and img_url.startswith('http'):
                                # –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                                skip_keywords = [
                                    'avatar', 'logo', 'icon', 'button', 'banner', 'ad', 'promo',
                                    'yastatic', 'avatars', 'thumb', 'preview', 'small', 'mini',
                                    'pig', '—Å–≤–∏–Ω—å—è', '—Å–≤–∏–Ω–∫–∞', 'pork', 'bacon', 'ham',  # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ —Å–≤–∏–Ω—å—è–º–∏
                                    '150x150', '200x200', '300x300'  # –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                                ]
                                
                                if any(skip in img_url.lower() for skip in skip_keywords):
                                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_url[:50]}...")
                                    continue
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ URL –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                quality_indicators = [
                                    'orig', 'original', 'full', 'large', 'big', 'hd',
                                    '1920', '1080', '800', '600', 'wallpaper'
                                ]
                                
                                is_quality = any(indicator in img_url.lower() for indicator in quality_indicators)
                                
                                if is_quality or len(img_url) > 100:  # –î–ª–∏–Ω–Ω—ã–µ URL —á–∞—Å—Ç–æ –≤–µ–¥—É—Ç –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º
                                    image_urls.append(img_url)
                                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_url[:80]}...")
                                    
                                    if len(image_urls) >= num_images:
                                        break
                                else:
                                    print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –º–∏–Ω–∏–∞—Ç—é—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {img_url[:50]}...")
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        close_selectors = [
                            'css:.Modal-Close',
                            'css:.close', 
                            'css:.MMClose',
                            'css:[data-bem*="close"]'
                        ]
                        
                        for close_selector in close_selectors:
                            close_btn = self.page.ele(close_selector)
                            if close_btn:
                                close_btn.click()
                                time.sleep(0.5)
                                break
                                
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {i+1}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –º–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            if len(image_urls) < num_images and img_elements:
                try:
                    print("üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                    first_img = img_elements[0]
                    first_img.click()
                    time.sleep(2)
                    
                    # –ò—â–µ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    big_img = self.page.ele('css:.MMImage-Origin img')
                    if big_img:
                        big_url = big_img.attr('src')
                        if big_url and big_url not in image_urls:
                            image_urls.append(big_url)
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {big_url[:80]}...")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            
            print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(image_urls)} URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return image_urls[:num_images]
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Yandex: {e}")
            return []

    def search_bing_images(self, product_name: str, num_images: int = 3) -> List[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Bing Images –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."""
        if not self.init_page():
            return []
            
        print(f"üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Bing –¥–ª—è: {product_name}")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_query = f"{product_name} —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"
            
            # URL Bing Images —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            url = f"https://www.bing.com/images/search?q={search_query}&qft=+filterui:imagesize-wallpaper"
            
            print(f"üì° –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {url}")
            self.page.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(3)
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_urls = []
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            img_elements = self.page.eles('css:.iusc img')
            
            print(f"üñºÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(img_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            for img in img_elements[:num_images * 2]:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    img_url = img.attr('src') or img.attr('data-src')
                    
                    if img_url and img_url.startswith('http'):
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if any(skip in img_url for skip in ['avatar', 'logo', 'icon', 'th?id=']):
                            continue
                        
                        image_urls.append(img_url)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_url[:80]}...")
                        
                        if len(image_urls) >= num_images:
                            break
                            
                except Exception as e:
                    continue
            
            print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(image_urls)} URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return image_urls[:num_images]
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Bing: {e}")
            return []

    def get_product_images(self, product_name: str, num_images: int = 3) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞."""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è: {product_name}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Yandex (–º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
        yandex_images = self.search_yandex_images(product_name, num_images)
        
        if len(yandex_images) >= num_images:
            print(f"‚úÖ Yandex –≤–µ—Ä–Ω—É–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(yandex_images)}")
            return yandex_images
        
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º Bing
        print("üîÑ –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ Bing...")
        bing_images = self.search_bing_images(product_name, num_images - len(yandex_images))
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_images = yandex_images + bing_images
        
        if len(all_images) >= num_images:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(all_images)}")
            return all_images[:num_images]
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("üì¶ –î–æ–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∞—Å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        return self.generate_fallback_images(product_name, num_images, all_images)

    def generate_fallback_images(self, product_name: str, num_images: int, existing_images: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∞—Å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        product_lower = product_name.lower()
        
        brand_info = {
            'beko': ('BEKO', '4a90e2'),
            'samsung': ('SAMSUNG', '6c5ce7'),
            'lg': ('LG', 'fd79a8'),
            'bosch': ('BOSCH', '0984e3'),
            'atlant': ('ATLANT', '00b894'),
            'delonghi': ('DELONGHI', 'e84393'),
            'kuppersberg': ('KUPPERSBERG', '2d3436'),
            'hiberg': ('HIBERG', '0984e3'),
            'asko': ('ASKO', '636e72'),
            'liebherr': ('LIEBHERR', '74b9ff'),
        }
        
        brand, color = ('REFRIGERATOR', '636e72')
        for key, (b, c) in brand_info.items():
            if key in product_lower:
                brand, color = b, c
                break
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        all_images = existing_images[:]
        colors = [color, '50c8a3', 'f5a623', '26de81', 'fd79a8']
        
        for i in range(len(existing_images), num_images):
            img_color = colors[i % len(colors)]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpbin.org –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
            url = f"https://httpbin.org/image/png"
            all_images.append(url)
        
        print(f"‚úÖ –ò—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(all_images)} (—Ä–µ–∞–ª—å–Ω—ã—Ö: {len(existing_images)}, –∑–∞–ø–∞—Å–Ω—ã—Ö: {len(all_images) - len(existing_images)})")
        return all_images

    def download_image(self, url: str) -> Optional[BytesIO]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL."""
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url[:80]}...")
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    time.sleep(random.uniform(1, 3))
                    print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º Referer –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∞–π—Ç–æ–≤
                headers = self.session.headers.copy()
                if 'yandex' in url:
                    headers['Referer'] = 'https://yandex.ru/'
                elif 'bing' in url:
                    headers['Referer'] = 'https://www.bing.com/'
                elif 'httpbin' in url:
                    # –î–ª—è httpbin –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
                
                response = self.session.get(
                    url, 
                    headers=headers,
                    timeout=15,
                    verify=False,
                    stream=True
                )
                response.raise_for_status()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                content_type = response.headers.get('content-type', '')
                if not content_type.startswith('image/'):
                    print(f"‚ö†Ô∏è  –ù–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {content_type}")
                    continue
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                image_data = BytesIO(response.content)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å
                try:
                    with Image.open(image_data) as img:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if img.size[0] < 100 or img.size[1] < 100:
                            print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {img.size}")
                            continue
                        img.verify()
                    image_data.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(response.content)} –±–∞–π—Ç, —Ä–∞–∑–º–µ—Ä: {img.size}")
                    return image_data
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                    continue
                    
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt == max_retries - 1:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        
            return None

    def optimize_and_save_image(self, image_data: BytesIO, product_id: str, filename: str) -> Optional[str]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MinIO."""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
            image_data.seek(0)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(image_data) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'P'):
                    img = img.convert('RGB')
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ –º–∞–∫—Å–∏–º—É–º 800x600, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                img.thumbnail((800, 600), Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
                output_buffer = BytesIO()
                img.save(output_buffer, format='JPEG', quality=85, optimize=True)
                
                # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MinIO
                storage_path = f"products/{product_id[:12]}/{filename}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MinIO - –ø–µ—Ä–µ–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç
                output_buffer.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
                success = storage_service.save_file(
                    storage_path,
                    output_buffer,
                    "image/jpeg"
                )
                
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ MinIO: {storage_path}")
                return storage_path
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def create_image_record(self, db: Session, product_id: str, storage_path: str, 
                          is_primary: bool = False, alt_text: str = "") -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ primary –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            if is_primary:
                existing_primary = db.query(ProductImage).filter(
                    ProductImage.product_id == product_id,
                    ProductImage.is_primary == True
                ).first()
                
                if existing_primary:
                    is_primary = False  # –î–µ–ª–∞–µ–º –Ω–µ primary –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            image_record = ProductImage(
                product_id=product_id,
                path=storage_path,
                filename=os.path.basename(storage_path),
                is_primary=is_primary,
                status="ready",
                alt_text=alt_text or f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                sort_order=0,
                uploaded_at=datetime.utcnow(),
                processed_at=datetime.utcnow()
            )
            
            db.add(image_record)
            db.flush()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞
            db.commit()
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î —Å–æ–∑–¥–∞–Ω–∞: ID={image_record.id}, path={storage_path}, primary={is_primary}")
            return True
                
        except Exception as e:
            db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
            import traceback
            traceback.print_exc()
            return False

    def process_product(self, product: Product, num_images: int = 3) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
        print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: '{product.name}' (ID: {product.id})")
        print("-" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_urls = self.get_product_images(product.name, num_images)
        
        if not image_urls:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return 0
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(image_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        saved_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for i, url in enumerate(image_urls, 1):
            print(f"\n[{i}/{len(image_urls)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = self.download_image(url)
            if not image_data:
                print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"img_{i:03d}.jpg"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            storage_path = self.optimize_and_save_image(image_data, product.id, filename)
            if not storage_path:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            with SessionLocal() as db:
                is_primary = (saved_count == 0)  # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–ª–∞–µ–º primary
                alt_text = f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product.name}"
                if self.create_image_record(db, product.id, storage_path, is_primary, alt_text):
                    saved_count += 1
                    print(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ product_images –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.id}")
        
        print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {saved_count}/{len(image_urls)}")
        return saved_count

    def clear_minio_products(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ MinIO."""
        try:
            print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ MinIO...")
            
            # –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç
            s3_client = boto3.client(
                's3',
                endpoint_url=settings.S3_ENDPOINT_URL,
                aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
                aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
                region_name=settings.AWS_REGION
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å prefix "products/"
            paginator = s3_client.get_paginator('list_objects_v2')
            pages = paginator.paginate(
                Bucket=settings.S3_BUCKET_NAME,
                Prefix='products/'
            )
            
            deleted_count = 0
            for page in pages:
                if 'Contents' in page:
                    # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏
                    objects_to_delete = [{'Key': obj['Key']} for obj in page['Contents']]
                    
                    if objects_to_delete:
                        s3_client.delete_objects(
                            Bucket=settings.S3_BUCKET_NAME,
                            Delete={'Objects': objects_to_delete}
                        )
                        deleted_count += len(objects_to_delete)
            
            if deleted_count > 0:
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤ –∏–∑ MinIO")
            else:
                print("üì≠ MinIO —É–∂–µ –ø—É—Å—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ MinIO: {e}")

    def clear_database_images(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î."""
        try:
            print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            db = SessionLocal()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
                count_before = db.query(ProductImage).count()
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {count_before}")
                
                if count_before > 0:
                    print("üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π...")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                    batch_size = 1000
                    total_deleted = 0
                    
                    while True:
                        # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        batch = db.query(ProductImage).limit(batch_size).all()
                        
                        if not batch:
                            break
                            
                        # –£–¥–∞–ª—è–µ–º –±–∞—Ç—á
                        for record in batch:
                            db.delete(record)
                        
                        db.commit()
                        total_deleted += len(batch)
                        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_deleted}/{count_before}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    count_after = db.query(ProductImage).count()
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î: {total_deleted}")
                    print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {count_after}")
                    
                else:
                    print("üì≠ –¢–∞–±–ª–∏—Ü–∞ product_images —É–∂–µ –ø—É—Å—Ç–∞")
            
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
            import traceback
            traceback.print_exc()

    def get_products_from_db(self) -> List[Product]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î."""
        try:
            print("üì¶ –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            with SessionLocal() as db:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º lazyload –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                from sqlalchemy.orm import lazyload
                
                products = db.query(Product).options(
                    lazyload(Product.attributes),
                    lazyload(Product.images),
                    lazyload(Product.category)
                ).all()
                
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î")
                return products
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î: {e}")
            return []


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ü–ê–†–°–ï–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –¢–û–í–ê–†–û–í –° DRISSIONPAGE")
    print("=" * 65)
    print("üîç –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Yandex –∏ Bing Images")
    print("üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MinIO –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î")
    print()
    
    parser = QualityImageParser()
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("üóëÔ∏è  –ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò –°–¢–ê–†–´–• –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
        with SessionLocal() as db:
            current_count = db.query(ProductImage).count()
            print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ product_images: {current_count}")
        
        parser.clear_minio_products()
        parser.clear_database_images()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        with SessionLocal() as db:
            after_count = db.query(ProductImage).count()
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {after_count}")
        
        print("‚úÖ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 50)
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
        products = parser.get_products_from_db()
        
        if not products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        print()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        total_saved = 0
        processed = 0
        
        for product in products:
            try:
                print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {processed + 1}/{len(products)}")
                saved = parser.process_product(product, num_images=3)
                total_saved += saved
                processed += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                with SessionLocal() as db:
                    total_records = db.query(ProductImage).count()
                    product_records = db.query(ProductImage).filter(
                        ProductImage.product_id == product.id
                    ).count()
                    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_records}, –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.id}: {product_records}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
                time.sleep(random.uniform(2, 4))
                
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product.name}: {e}")
                import traceback
                traceback.print_exc()
                continue
        
        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 50)
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed}")
        print(f"üì∏ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_saved}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        with SessionLocal() as db:
            final_count = db.query(ProductImage).count()
            print(f"üìä –ò–¢–û–ì–û–í–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ product_images: {final_count}")
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º DrissionPage
        parser.close_page()
        print("‚úÖ DrissionPage –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    main()