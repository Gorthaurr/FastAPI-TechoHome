#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ==== –ì–õ–û–ë–ê–õ–¨–ù–´–ô UTF-8 –†–ï–ñ–ò–ú (—Ñ–∏–∫—Å UnicodeDecodeError –Ω–∞ Windows –∫–æ–Ω—Å–æ–ª–∏/–ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞—Ö) ====
import os as _os
_os.environ.setdefault("PYTHONUTF8", "1")
_os.environ.setdefault("PYTHONIOENCODING", "UTF-8")

"""
–ü–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –º–æ–¥–∞–ª–∫–∏ (DrissionPage)

–ì–ª–∞–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
- –ù–ò–ö–ê–ö–û–ì–û viewer/modal. –ë–µ—Ä—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø—Ä—è–º–æ —Å –≤—ã–¥–∞—á–∏ (anchors —Å ?img_url=).
- –°–æ–±–∏—Ä–∞–µ–º N*K –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∫—Ä–æ–ª–ª, –≤—ã–Ω–∏–º–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ URL –∏–∑ img_url,
  –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã, —Å–∫–∞—á–∏–≤–∞–µ–º.
- –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Referer –ø–æ–¥ –¥–æ–º–µ–Ω—ã (mvideo/ozon/yandex/wb/leroy –∏ —Ç.–¥.).
- –ë–∞—Ç—á-–∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Ñ–æ—Ç–æ, timezone-aware –¥–∞—Ç—ã.
- HTTP pooling + retries, tuple-—Ç–∞–π–º–∞—É—Ç—ã, —Ä–∞–∑–≥—Ä—É–∑–∫–∞ DOM.

"""

import sys
import re
import gc
import time
import warnings
from io import BytesIO
from datetime import datetime, timezone
from typing import List, Optional, Set, Dict, Tuple
from urllib.parse import quote, urljoin, urlparse, parse_qs, unquote

import requests
import urllib3
from PIL import Image

Image.MAX_IMAGE_PIXELS = 120_000_000  # ~120 –ú–ü

# ---------- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ----------
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

# ---------- –ü—É—Ç–∏/–æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ----------
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('STORAGE_TYPE', 's3')
os.environ.setdefault('DATABASE_URL', 'postgresql+psycopg2://postgres:password@localhost:5433/fastapi_shop')

# ---------- –ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ----------
from app.db.database import SessionLocal
from app.db.models.product import Product
from app.db.models.product_image import ProductImage
from app.services.storage_service import storage_service
from app.core.config import settings

# ---------- DrissionPage ----------
from DrissionPage import ChromiumPage, ChromiumOptions
from DrissionPage.common import Settings

# ---------- HTTP pooling/retry ----------
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry


# ========================= –£–¢–ò–õ–ò–¢–´ =========================

def _is_direct_image_url(url: str) -> bool:
    return bool(re.search(r'\.(jpg|jpeg|png|webp|gif|bmp|tif|tiff)(\?|$)', url, flags=re.I))


def _guess_ext(url: str, content_type: str) -> str:
    u = (url or '').lower()
    if u.endswith(('.jpg', '.jpeg')): return '.jpg'
    if u.endswith('.png'):  return '.png'
    if u.endswith('.webp'): return '.webp'
    if u.endswith('.gif'):  return '.gif'
    if u.endswith('.bmp'):  return '.bmp'
    if u.endswith(('.tif', '.tiff')): return '.tiff'
    if content_type:
        ct = (content_type or '').lower()
        if 'jpeg' in ct: return '.jpg'
        if 'png'  in ct: return '.png'
        if 'webp' in ct: return '.webp'
        if 'gif'  in ct: return '.gif'
        if 'bmp'  in ct: return '.bmp'
        if 'tiff' in ct: return '.tiff'
    return '.jpg'


def _origin(url: str) -> str:
    p = urlparse(url)
    if not p.scheme or not p.netloc:
        return ''
    return f'{p.scheme}://{p.netloc}/'


def _domain_referer(url: str, fallback: Optional[str] = None) -> Optional[str]:
    """–ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Referer –¥–ª—è –∫–∞–ø—Ä–∏–∑–Ω—ã—Ö CDN."""
    host = (urlparse(url).netloc or '').lower()
    if host.endswith('mvideo.ru'):
        return 'https://www.mvideo.ru/'
    if host.endswith('ozone.ru'):
        return 'https://www.ozon.ru/'
    if host.endswith('yandex.net') or host.endswith('yandex.ru'):
        return 'https://yandex.ru/images/'
    if host.endswith('wildberries.ru'):
        return 'https://www.wildberries.ru/'
    if host.endswith('leroymerlin.ru'):
        return 'https://leroymerlin.ru/'
    return fallback


def _magic_image_type(header16: bytes) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ (–ø–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç)."""
    if len(header16) < 8:
        return None
    b = header16
    # JPEG
    if b[:2] == b'\xFF\xD8':
        return 'jpeg'
    # PNG
    if b[:8] == b'\x89PNG\r\n\x1a\n':
        return 'png'
    # GIF87a/GIF89a
    if b[:6] in (b'GIF87a', b'GIF89a'):
        return 'gif'
    # WEBP: RIFF....WEBP
    if b[:4] == b'RIFF' and b[8:12] == b'WEBP':
        return 'webp'
    # BMP
    if b[:2] == b'BM':
        return 'bmp'
    # TIFF
    if b[:4] in (b'II*\x00', b'MM\x00*'):
        return 'tiff'
    return None


# ========================= –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° =========================

class QualityImageParser:
    def __init__(
        self,
        min_side: int = 300,
        rotate_every_products: int = 20,          # –∫–∞–∂–¥—ã–µ N —Ç–æ–≤–∞—Ä–æ–≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Chromium
        close_browser_each_product: bool = False  # –∑–∞–∫—Ä—ã–≤–∞—Ç—å Chromium –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    ):
        print("==================================================")
        print("STORAGE SERVICE INITIALIZATION")
        print("==================================================")
        print(f"STORAGE_TYPE: {os.environ.get('STORAGE_TYPE', 'local')}")
        print(f"S3_BUCKET_NAME: {settings.S3_BUCKET_NAME}")
        print(f"S3_ENDPOINT_URL: {settings.S3_ENDPOINT_URL}")
        print(f"Final storage service: {type(storage_service)}")
        print("==================================================")

        Settings.raise_when_ele_not_found = False
        self.page: Optional[ChromiumPage] = None

        # HTTP session + pooling/retry
        self.session = requests.Session()
        retries = Retry(total=3, backoff_factor=0.2, status_forcelist=(429, 500, 502, 503, 504))
        adapter = HTTPAdapter(pool_connections=32, pool_maxsize=64, max_retries=retries)
        self.session.mount('http://', adapter)
        self.session.mount('https://', adapter)
        self.session.headers.update({
            'User-Agent': ('Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                           'AppleWebKit/537.36 (KHTML, like Gecko) '
                           'Chrome/120.0.0.0 Safari/537.36'),
            'Accept': 'image/avif,image/webp,image/apng,image/*,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })

        self.min_side = min_side
        self.rotate_every_products = int(rotate_every_products) if rotate_every_products else 0
        self.close_browser_each_product = bool(close_browser_each_product)

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞
        self.download_dir = os.path.join(os.getcwd(), "downloaded_images")
        os.makedirs(self.download_dir, exist_ok=True)

    # -------------------- –ë—Ä–∞—É–∑–µ—Ä --------------------

    def init_page(self) -> bool:
        if self.page is None:
            try:
                print("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DrissionPage (headless)...")
                co = ChromiumOptions()

                # 1) –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API headless
                enabled = False
                for m in ('set_headless', 'headless'):
                    if hasattr(co, m):
                        try:
                            getattr(co, m)(True)
                            enabled = True
                            break
                        except Exception:
                            pass

                # 2) –§–æ–ª–±—ç–∫ —Ñ–ª–∞–≥–∞–º–∏
                if not enabled:
                    for flag in ('--headless=new', '--headless'):
                        try:
                            if hasattr(co, 'set_argument'):
                                co.set_argument(flag)
                                enabled = True
                                break
                        except Exception:
                            continue

                # –§–ª–∞–≥–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                for arg in ('--disable-gpu', '--no-sandbox', '--disable-dev-shm-usage', '--window-size=1920,1080'):
                    try:
                        if hasattr(co, 'set_argument'):
                            co.set_argument(arg)
                    except Exception:
                        pass

                self.page = ChromiumPage(co)
                self.page.set.user_agent(self.session.headers['User-Agent'])
                self.page.set.timeouts(base=10)
                print("‚úÖ DrissionPage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å–∫—Ä—ã—Ç)")
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DrissionPage: {e}")
                print("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ Chromium –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: co.set_browser_path('/usr/bin/chromium')")
                return False
        return True

    def close_page(self):
        if self.page:
            try:
                self.page.quit()
                self.page = None
                print("‚úÖ DrissionPage –∑–∞–∫—Ä—ã—Ç")
            except Exception:
                pass

    # -------------------- –ü–æ–∏—Å–∫ (–±–µ–∑ –º–æ–¥–∞–ª–∫–∏) --------------------

    def open_search_by_name(self, product_name: str) -> str:
        q = quote(product_name)
        url = f"https://yandex.ru/images/search?text={q}"
        print(f"üì° –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–¥–∞—á—É –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∏–Ω–æ–∫: {url}")
        self.page.get(url)
        time.sleep(0.5)
        return url

    def _scroll_collect_candidate_hrefs(self, need: int, max_rounds: int = 12) -> List[str]:
        """–°–∫—Ä–æ–ª–ª–∏–º SERP –≤–Ω–∏–∑ –∏ —Å–æ–±–∏—Ä–∞–µ–º href —Å img_url –∏–∑ –ø–ª–∏—Ç–æ–∫."""
        seen: Set[str] = set()
        hrefs: List[str] = []

        rounds = 0
        last_count = 0

        while rounds < max_rounds and len(hrefs) < need:
            rounds += 1
            # —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ a[href*="img_url="]
            try:
                anchors = self.page.eles('css:a[href*="img_url="]') or []
            except Exception:
                anchors = []

            for a in anchors:
                try:
                    href = a.attr('href') or ''
                    if not href:
                        continue
                    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
                    if href.startswith('//'): href = 'https:' + href
                    elif href.startswith('/'): href = urljoin('https://yandex.ru', href)
                    if 'img_url=' not in href:
                        continue
                    if href in seen:
                        continue
                    seen.add(href)
                    hrefs.append(href)
                except Exception:
                    continue

            # –µ—Å–ª–∏ –ø—Ä–∏—Ä–æ—Å—Ç–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –µ—â—ë
            if len(hrefs) >= need:
                break

            if len(hrefs) == last_count:
                # –¥–æ—Å–∫—Ä–æ–ª–ª–∏—Ç—å –¥–æ –Ω–∏–∑–∞ + –ø–æ–¥–æ–∂–¥–∞—Ç—å
                try:
                    self.page.scroll.to_bottom()
                except Exception:
                    pass
                time.sleep(0.6)
            else:
                last_count = len(hrefs)
                try:
                    self.page.scroll.down(1200)
                except Exception:
                    pass
                time.sleep(0.3)

        return hrefs

    def _extract_img_urls_from_hrefs(self, hrefs: List[str], max_items: int) -> List[str]:
        """–î–æ—Å—Ç–∞—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ img_url."""
        out: List[str] = []
        seen_urls: Set[str] = set()
        for href in hrefs:
            try:
                q = parse_qs(urlparse(href).query)
                raw = q.get('img_url', [None])[0]
                if not raw:
                    continue
                url = unquote(raw)
                if not url.startswith('http'):
                    continue
                # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –±–µ–∑ query –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                base = url.split('?', 1)[0]
                if base in seen_urls:
                    continue
                seen_urls.add(base)
                out.append(url)
                if len(out) >= max_items:
                    break
            except Exception:
                continue
        return out

    # -------------------- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π --------------------

    def _download_to_file(self, url: str, referer: Optional[str]) -> Optional[str]:
        headers = self.session.headers.copy()

        # –ü–æ–¥–±–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ Referer
        ref = _domain_referer(url, referer or _origin(url) or 'https://yandex.ru/images/')
        if ref:
            headers['Referer'] = ref

        try:
            os.makedirs(self.download_dir, exist_ok=True)
        except Exception:
            pass

        ts = int(time.time() * 1000)
        tmp_name = f"dl_{ts}_{os.getpid()}"

        # HEAD –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        try:
            head = self.session.head(url, headers=headers, timeout=(5, 10), verify=False, allow_redirects=True)
            ct_head = (head.headers.get("Content-Type", "") or "").lower()
            if ct_head and (not ct_head.startswith('image/')):
                print(f"‚ö†Ô∏è  HEAD –Ω–µ image/* ({ct_head}) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                return None
        except Exception:
            ct_head = ""

        # GET —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
        try:
            r = self.session.get(url, headers=headers, timeout=(5, 25), verify=False, stream=True, allow_redirects=True)
            r.raise_for_status()
        except requests.RequestException as e:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
            return None

        ct = (r.headers.get('Content-Type', '') or '').lower()
        if ct and (not ct.startswith('image/')):
            print(f"‚ö†Ô∏è  GET –Ω–µ image/* ({ct}) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
            try: r.close()
            except Exception: pass
            return None

        # –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã
        try:
            first = next(r.iter_content(chunk_size=8192))
        except StopIteration:
            first = b''
        except Exception:
            try: r.close()
            except Exception: pass
            return None

        magic = _magic_image_type(first[:16])
        if not magic:
            print("‚ö†Ô∏è  –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
            try: r.close()
            except Exception: pass
            return None

        ext = _guess_ext(url, ct or ct_head) or ".jpg"
        file_path = os.path.join(self.download_dir, f"{tmp_name}{ext}")

        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –≤ —Ñ–∞–π–ª: {url} -> {file_path}")
        try:
            with open(file_path, "wb") as f:
                if first:
                    f.write(first)
                for chunk in r.iter_content(chunk_size=1024 * 128):
                    if chunk:
                        f.write(chunk)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception:
                pass
            return None
        finally:
            try: r.close()
            except Exception: pass

        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
        try:
            with Image.open(file_path) as im:
                w, h = im.size
                if min(w, h) < self.min_side:
                    print(f"‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {w}x{h} (<{self.min_side})")
                    os.remove(file_path)
                    return None
                if (w * h) > 40_000_000:
                    print(f"‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {w}x{h} (>40 –ú–ü) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                    os.remove(file_path)
                    return None
        except Exception as e:
            print(f"‚ö†Ô∏è  PIL –æ—à–∏–±–∫–∞: {e}")
            try: os.remove(file_path)
            except Exception: pass
            return None

        return file_path

    # -------------------- MinIO + –ë–î --------------------

    def optimize_and_save_image_from_file(self, file_path: str, product_id: str, filename: str) -> Optional[str]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –¥–∏—Å–∫–∞: draft() –¥–ª—è JPEG, –∫–æ–Ω–≤–µ—Ä—Ç –≤ RGB, thumbnail -> JPEG -> MinIO."""
        try:
            with Image.open(file_path) as img:
                try:
                    if (img.format or '').upper() == 'JPEG':
                        img.draft('RGB', (800, 600))
                except Exception:
                    pass

                if img.mode in ('RGBA', 'P'):
                    img = img.convert('RGB')
                elif img.mode != 'RGB':
                    img = img.convert('RGB')

                img.thumbnail((800, 600), Image.Resampling.LANCZOS)

                output_buffer = BytesIO()
                img.save(output_buffer, format='JPEG', quality=85, optimize=True)

            storage_path = f"products/{product_id[:12]}/{filename}"
            output_buffer.seek(0)
            success = storage_service.save_file(
                storage_path,
                output_buffer,
                "image/jpeg"
            )
            if not success:
                print("‚ùå storage_service –≤–µ—Ä–Ω—É–ª False")
                return None
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ MinIO: {storage_path}")
            return storage_path
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MinIO: {e}")
            return None

    def create_image_record(self, db, product_id: str, storage_path: str,
                            is_primary: bool = False, alt_text: str = "") -> bool:
        try:
            if is_primary:
                existing_primary = db.query(ProductImage).filter(
                    ProductImage.product_id == product_id,
                    ProductImage.is_primary == True
                ).first()
                if existing_primary:
                    is_primary = False

            image_record = ProductImage(
                product_id=product_id,
                path=storage_path,
                filename=os.path.basename(storage_path),
                is_primary=is_primary,
                status="ready",
                alt_text=alt_text or "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                sort_order=0,
                uploaded_at=datetime.now(timezone.utc),
                processed_at=datetime.now(timezone.utc)
            )

            db.add(image_record)
            db.flush()
            db.commit()
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î —Å–æ–∑–¥–∞–Ω–∞: ID={image_record.id}, path={storage_path}, primary={is_primary}")
            return True

        except Exception as e:
            db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
            return False

    def _upload_file_to_minio_and_record(self, file_path: str, product, seq: int) -> bool:
        filename = f"img_{seq:03d}.jpg"
        try:
            storage_path = self.optimize_and_save_image_from_file(file_path, str(product.id), filename)
            if not storage_path:
                return False
            with SessionLocal() as db:
                ok = self.create_image_record(
                    db=db,
                    product_id=product.id,
                    storage_path=storage_path,
                    is_primary=(seq == 1),
                    alt_text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product.name}"
                )
            return ok
        finally:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception:
                pass

    # -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) --------------------
    def _largest_img_src_on_page(self) -> Optional[str]:
        """–û—Å—Ç–∞–≤–ª—è—é –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏)."""
        try:
            imgs = self.page.eles('css:img') or []
        except Exception:
            imgs = []
        best_url, best_w = None, -1
        for img in imgs:
            try:
                ss = img.attr('srcset')
                if ss:
                    for part in ss.split(','):
                        t = part.strip().split()
                        if not t:
                            continue
                        u = t[0]
                        w = 0
                        if len(t) > 1 and t[1].endswith('w'):
                            try:
                                w = int(t[1][:-1])
                            except Exception:
                                w = 0
                        if u.startswith('http') and w > best_w:
                            best_w, best_url = w, u
                    continue
                src = img.attr('src')
                if src and src.startswith('http') and best_w < 0:
                    best_url = src
                    best_w = 0
            except Exception:
                continue
        return best_url

    # -------------------- –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ --------------------

    def get_products_needing_images(self, images_per_product: int = 3) -> Tuple[List[Product], Dict[str, int]]:
        """–û–¥–∏–Ω –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã, –≥–¥–µ —Ñ–æ—Ç–æ < images_per_product."""
        try:
            print(f"üì¶ –ë–∞—Ç—á-–∑–∞–ø—Ä–æ—Å: –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ < {images_per_product} ...")
            from sqlalchemy import func
            from sqlalchemy.orm import lazyload
            with SessionLocal() as db:
                q = (
                    db.query(
                        Product,
                        func.count(ProductImage.id).label('img_cnt')
                    )
                    .outerjoin(ProductImage, ProductImage.product_id == Product.id)
                    .group_by(Product.id)
                    .having(func.count(ProductImage.id) < images_per_product)
                )

                rows = (
                    q.options(
                        lazyload(Product.attributes),
                        lazyload(Product.images),
                        lazyload(Product.category)
                    )
                    .all()
                )

                products = [row[0] for row in rows]
                counts = {row[0].id: int(row[1]) for row in rows}
                print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Ñ–æ—Ç–æ: {len(products)}")
                return products, counts
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å–∞: {e}")
            return [], {}

    # -------------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Ç–æ–≤–∞—Ä—É (–±–µ–∑ –º–æ–¥–∞–ª–∫–∏) --------------------

    def process_product(self, product: Product, images_per_product: int = 3, **kwargs) -> int:
        """
        existing_count ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–∏–∑ –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å–∞).
        """
        print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: '{product.name}' (ID: {product.id})")
        print("-" * 60)

        if not self.init_page():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            return 0

        existing = kwargs.get('existing_count')
        if existing is None:
            try:
                with SessionLocal() as db:
                    existing = db.query(ProductImage).filter(ProductImage.product_id == product.id).count()
            except Exception:
                existing = 0

        if existing >= images_per_product:
            print(f"‚è≠Ô∏è –£–∂–µ –µ—Å—Ç—å {existing} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (‚â• {images_per_product}). –ü—Ä–æ–ø—É—Å–∫ —Ç–æ–≤–∞—Ä–∞.")
            return 0

        need_to_save = images_per_product - existing
        print(f"‚ÑπÔ∏è  –í –ë–î —É–∂–µ: {existing}. –ù—É–∂–Ω–æ –¥–æ–∫–∞—á–∞—Ç—å: {need_to_save}.")

        # 1) –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–¥–∞—á—É
        self.open_search_by_name(product.name)

        # 2) –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –ø–ª–∏—Ç–æ–∫ (–±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏)
        raw_hrefs = self._scroll_collect_candidate_hrefs(need=need_to_save * 8, max_rounds=14)
        candidates = self._extract_img_urls_from_hrefs(raw_hrefs, max_items=need_to_save * 6)

        if not candidates:
            print("‚ö†Ô∏è  –ù–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä—è–º–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ img_url ‚Äî –ø—Ä–æ–ø—É—Å–∫ —Ç–æ–≤–∞—Ä–∞")
            return 0

        # 3) –ì—Ä—É–∑–∏–º –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
        saved = 0
        tried = 0
        seen_hosts: Set[str] = set()
        downloaded_urls: Set[str] = set()

        for url in candidates:
            if saved >= need_to_save:
                break
            tried += 1

            # –ª—ë–≥–∫–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –¥–æ–º–µ–Ω–∞–º (—á—Ç–æ–±—ã –Ω–µ –±–∏—Ç—å—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑ –æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π CDN)
            host = (urlparse(url).netloc or '').lower()
            if host in seen_hosts and tried < len(candidates):
                # –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã
                continue
            seen_hosts.add(host)

            ref = _domain_referer(url, 'https://yandex.ru/images/')
            if url in downloaded_urls:
                continue

            seq = existing + saved + 1
            print(f"üîó –ë—É–¥–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å (–≤ —Ñ–∞–π–ª): {url} -> seq={seq}")
            file_path = self._download_to_file(url, referer=ref)
            if not file_path:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å/–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å ‚Äî skip")
                continue

            if self._upload_file_to_minio_and_record(file_path, product, seq=seq):
                downloaded_urls.add(url)
                saved += 1
                print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–æ–≤–∞—Ä—É: {existing + saved}/{images_per_product}")
                if (existing + saved) % 10 == 0:
                    gc.collect()
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ MinIO/–∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î ‚Äî skip")

        print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {saved}/{need_to_save} (–∏—Ç–æ–≥ –≤ –ë–î –±—É–¥–µ—Ç {existing + saved})")

        # –†–∞–∑–≥—Ä—É–∑–∫–∞ —Ç—è–∂—ë–ª—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        try:
            if self.page:
                self.page.get('about:blank')
                time.sleep(0.1)
        except Exception:
            pass

        return saved

    # -------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π) --------------------

    def get_products_from_db(self) -> List[Product]:
        try:
            print("üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î...")
            with SessionLocal() as db:
                from sqlalchemy.orm import lazyload
                products = db.query(Product).options(
                    lazyload(Product.attributes),
                    lazyload(Product.images),
                    lazyload(Product.category)
                ).all()
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                return products
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []


# ========================= main =========================

def main():
    print("üöÄ –ü–ê–†–°–ï–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ‚Äî —Ñ–∞–π–ª ‚Üí MinIO ‚Üí –∑–∞–ø–∏—Å—å –≤ Postgres (–±–µ–∑ –º–æ–¥–∞–ª–∫–∏)")
    print("=" * 94)
    print("–®–∞–≥–∏: –ø–æ–∏—Å–∫ ‚Üí –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ img_url ‚Üí —Ñ–∞–π–ª ‚Üí MinIO ‚Üí –ë–î (–¥–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä)\n")

    parser = QualityImageParser(min_side=300, rotate_every_products=20, close_browser_each_product=False)

    try:
        images_per_product = 3

        products, counts = parser.get_products_needing_images(images_per_product=images_per_product)
        if not products:
            print(f"‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∏–º–µ—é—Ç ‚â• {images_per_product} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return

        saved_total = 0
        processed = 0

        for product in products:
            # –†–æ—Ç–∞—Ü–∏—è Chromium –∫–∞–∂–¥—ã–µ N —Ç–æ–≤–∞—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if parser.rotate_every_products and processed > 0 and processed % parser.rotate_every_products == 0:
                parser.close_page()
                time.sleep(0.2)

            try:
                print(f"\nüîÑ –¢–æ–≤–∞—Ä {processed + 1}/{len(products)}")
                existing = counts.get(product.id, 0)
                saved = parser.process_product(
                    product,
                    images_per_product=images_per_product,
                    existing_count=existing
                )
                saved_total += saved
                processed += 1
                time.sleep(0.2)

                # –ó–∞–∫—Ä—ã–≤–∞—Ç—å Chromium –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç RAM)
                if parser.close_browser_each_product:
                    parser.close_page()
                    time.sleep(0.1)

            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product.name}: {e}")
                continue

        print("\nüéâ –ì–û–¢–û–í–û")
        print("=" * 50)
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed}")
        print(f"üì∏ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {saved_total}")

    finally:
        parser.close_page()
        print("‚úÖ DrissionPage –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    main()
