#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã FastAPI —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏ CDN.
–ó–∞–ø—É—Å–∫–∞–µ—Ç: PostgreSQL, MinIO, Redis, FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import json
import os
import signal
import subprocess
import sys
import threading
import time
from pathlib import Path
from typing import List, Optional


# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    BLUE = "\033[94m"
    PURPLE = "\033[95m"
    CYAN = "\033[96m"
    BOLD = "\033[1m"
    END = "\033[0m"


class SystemRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π."""

    def __init__(self):
        self.processes = []
        self.running = False
        self.project_root = Path(__file__).parent

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å docker-compose.yml)
        self.fastapi_port = 8000
        self.postgres_port = 5433
        self.minio_api_port = 9002  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 9000 –Ω–∞ 9002
        self.minio_console_port = 9001
        self.redis_port = 6379
        self.pgadmin_port = 5050  # –î–æ–±–∞–≤–ª–µ–Ω pgAdmin

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.docker_compose_file = self.project_root / "docker-compose.yml"
        self.env_file = self.project_root.parent / ".env"  # .env –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
        self.uploads_dir = (
            self.project_root.parent / "uploads"
        )  # uploads –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
        self.cdn_cache_dir = (
            self.project_root.parent / "cdn_cache"
        )  # cdn_cache –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ

    def print_status(self, message: str, color: str = Colors.GREEN):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        timestamp = time.strftime("%H:%M:%S")
        print(f"{color}[{timestamp}] {message}{Colors.END}")

    def print_header(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        print(f"{Colors.BOLD}{Colors.CYAN}")
        print("=" * 60)
        print("üöÄ FastAPI Image Management System")
        print("=" * 60)
        print(f"{Colors.END}")
        print(f"{Colors.YELLOW}–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...{Colors.END}")
        print()

    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
        self.print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...", Colors.BLUE)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
        if sys.version_info < (3, 8):
            self.print_status("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+", Colors.RED)
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        try:
            result = subprocess.run(
                ["docker", "--version"], capture_output=True, text=True, timeout=5
            )
            if result.returncode == 0:
                self.print_status("‚úÖ Docker –Ω–∞–π–¥–µ–Ω", Colors.GREEN)
            else:
                self.print_status("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
                return False
        except (subprocess.TimeoutExpired, FileNotFoundError):
            self.print_status("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose
        try:
            result = subprocess.run(
                ["docker-compose", "--version"],
                capture_output=True,
                text=True,
                timeout=5,
            )
            if result.returncode == 0:
                self.print_status("‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω", Colors.GREEN)
            else:
                self.print_status("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
                return False
        except (subprocess.TimeoutExpired, FileNotFoundError):
            self.print_status("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False

        return True

    def start_docker_desktop(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Docker Desktop."""
        self.print_status("–ó–∞–ø—É—Å–∫ Docker Desktop...", Colors.BLUE)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ Docker
        try:
            result = subprocess.run(
                ["docker", "ps"], capture_output=True, text=True, timeout=5
            )
            if result.returncode == 0:
                self.print_status("‚úÖ Docker Desktop —É–∂–µ –∑–∞–ø—É—â–µ–Ω", Colors.GREEN)
                return True
        except:
            pass

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Desktop
        docker_paths = [
            r"C:\Program Files\Docker\Docker\Docker Desktop.exe",
            r"C:\Program Files (x86)\Docker\Docker\Docker Desktop.exe",
            "Docker Desktop.exe",
        ]

        for docker_path in docker_paths:
            try:
                if os.path.exists(docker_path):
                    self.print_status(
                        f"–ó–∞–ø—É—Å–∫ Docker Desktop: {docker_path}", Colors.YELLOW
                    )
                    subprocess.Popen(
                        [docker_path],
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL,
                    )
                    break
            except Exception as e:
                continue
        else:
            self.print_status("‚ùå Docker Desktop –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False

        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Docker
        self.print_status("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Docker Desktop...", Colors.YELLOW)
        for attempt in range(30):  # –ñ–¥–µ–º –¥–æ 1 –º–∏–Ω—É—Ç—ã
            try:
                result = subprocess.run(
                    ["docker", "ps"], capture_output=True, text=True, timeout=5
                )
                if result.returncode == 0:
                    self.print_status("‚úÖ Docker Desktop –∑–∞–ø—É—â–µ–Ω", Colors.GREEN)
                    return True
            except:
                pass

            time.sleep(2)
            if attempt % 5 == 0:  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.print_status(f"–û–∂–∏–¥–∞–Ω–∏–µ... ({attempt + 1}/30)", Colors.YELLOW)

        self.print_status("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ Docker Desktop", Colors.RED)
        return False

    def setup_directories(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        self.print_status("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...", Colors.BLUE)

        directories = [self.uploads_dir, self.cdn_cache_dir]
        for directory in directories:
            directory.mkdir(exist_ok=True)
            self.print_status(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory.name}", Colors.GREEN)

    def setup_env_file(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å .env —Ñ–∞–π–ª."""
        self.print_status("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞...", Colors.BLUE)

        if not self.env_file.exists():
            # –°–æ–∑–¥–∞–µ–º .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
            env_example = self.project_root.parent / "env.example"
            if env_example.exists():
                import shutil

                shutil.copy(env_example, self.env_file)
                self.print_status("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏–∑ env.example", Colors.GREEN)
            else:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                env_content = """# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=postgresql+psycopg2://postgres:password@localhost:5433/fastapi_shop

# –•—Ä–∞–Ω–∏–ª–∏—â–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ S3 –µ—Å–ª–∏ Docker –¥–æ—Å—Ç—É–ø–µ–Ω)
STORAGE_TYPE=local
STORAGE_PATH=uploads
MAX_IMAGE_SIZE=10485760
ALLOWED_IMAGE_TYPES=jpg,jpeg,png,webp,gif

# S3 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è MinIO)
S3_BUCKET_NAME=product-images
AWS_REGION=us-east-1
S3_ENDPOINT_URL=http://localhost:9002
AWS_ACCESS_KEY_ID=minioadmin
AWS_SECRET_ACCESS_KEY=minioadmin

# CDN (–ª–æ–∫–∞–ª—å–Ω—ã–π)
CDN_BASE_URL=

# –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
DEBUG=true
"""
                self.env_file.write_text(env_content, encoding="utf-8")
                self.print_status(
                    "‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏", Colors.GREEN
                )
        else:
            self.print_status("‚úÖ .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", Colors.GREEN)

    def start_docker_services(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å—ã."""
        self.print_status("–ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...", Colors.BLUE)

        if not self.docker_compose_file.exists():
            self.print_status("‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
            return False

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            subprocess.run(
                ["docker-compose", "down"], cwd=self.project_root, capture_output=True
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            process = subprocess.Popen(
                ["docker-compose", "up", "-d"],
                cwd=self.project_root,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            stdout, stderr = process.communicate(timeout=60)

            if process.returncode == 0:
                self.print_status("‚úÖ Docker —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã", Colors.GREEN)
                return True
            else:
                self.print_status(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker: {stderr}", Colors.RED)
                return False

        except subprocess.TimeoutExpired:
            process.kill()
            self.print_status("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤", Colors.RED)
            return False
        except Exception as e:
            self.print_status(f"‚ùå –û—à–∏–±–∫–∞: {e}", Colors.RED)
            return False

    def setup_minio_bucket(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å MinIO bucket."""
        self.print_status("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO bucket...", Colors.BLUE)

        bucket_name = "product-images"

        try:
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MinIO
            import socket

            for attempt in range(30):  # 1 –º–∏–Ω—É—Ç–∞
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(2)
                    result = sock.connect_ex(("localhost", self.minio_api_port))
                    sock.close()
                    if result == 0:
                        break
                except:
                    pass
                time.sleep(2)
            else:
                self.print_status("‚ùå MinIO –Ω–µ –≥–æ—Ç–æ–≤", Colors.RED)
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ MinIO
            try:
                result = subprocess.run(
                    [
                        "docker",
                        "ps",
                        "--filter",
                        "ancestor=minio/minio",
                        "--format",
                        "{{.Names}}",
                    ],
                    capture_output=True,
                    text=True,
                    timeout=10,
                )

                if result.returncode == 0 and result.stdout.strip():
                    container_name = result.stdout.strip()
                    self.print_status(
                        f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä MinIO: {container_name}", Colors.GREEN
                    )
                else:
                    self.print_status(
                        "‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä MinIO –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É bucket",
                        Colors.YELLOW,
                    )
                    return True

                # –°–æ–∑–¥–∞–µ–º bucket —á–µ—Ä–µ–∑ MinIO client
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å bucket
                    result = subprocess.run(
                        [
                            "docker",
                            "exec",
                            container_name,
                            "mc",
                            "mb",
                            f"local/{bucket_name}",
                        ],
                        capture_output=True,
                        text=True,
                        timeout=10,
                    )

                    if result.returncode == 0:
                        self.print_status("‚úÖ MinIO bucket —Å–æ–∑–¥–∞–Ω", Colors.GREEN)
                    elif "already exists" in result.stderr:
                        self.print_status(
                            "‚úÖ MinIO bucket —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", Colors.GREEN
                        )
                    else:
                        self.print_status(
                            f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: {result.stderr}", Colors.YELLOW
                        )

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É public read
                    subprocess.run(
                        [
                            "docker",
                            "exec",
                            container_name,
                            "mc",
                            "policy",
                            "set",
                            "download",
                            f"local/{bucket_name}",
                        ],
                        capture_output=True,
                        text=True,
                        timeout=10,
                    )

                    self.print_status("‚úÖ MinIO bucket –Ω–∞—Å—Ç—Ä–æ–µ–Ω", Colors.GREEN)
                    return True

                except Exception as e:
                    self.print_status(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ bucket: {e}", Colors.YELLOW)
                    return False

            except Exception as e:
                self.print_status(
                    f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ MinIO: {e}", Colors.YELLOW
                )
                return False

        except Exception as e:
            self.print_status(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MinIO: {e}", Colors.RED)
            return False

    def switch_to_s3_storage(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
        self.print_status("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...", Colors.BLUE)

        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
            env_content = self.env_file.read_text(encoding="utf-8")

            # –ó–∞–º–µ–Ω—è–µ–º STORAGE_TYPE –Ω–∞ s3
            env_content = env_content.replace("STORAGE_TYPE=local", "STORAGE_TYPE=s3")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            self.env_file.write_text(env_content, encoding="utf-8")

            self.print_status("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", Colors.GREEN)

        except Exception as e:
            self.print_status(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ S3: {e}", Colors.YELLOW)

    def wait_for_services(self):
        """–û–∂–∏–¥–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤."""
        self.print_status("–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...", Colors.BLUE)

        services = [
            ("PostgreSQL", "localhost", self.postgres_port),
            ("MinIO API", "localhost", self.minio_api_port),
            ("MinIO Console", "localhost", self.minio_console_port),
            ("Redis", "localhost", self.redis_port),
            ("pgAdmin", "localhost", self.pgadmin_port),
        ]

        import socket

        ready_services = []

        for service_name, host, port in services:
            self.print_status(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {service_name}...", Colors.YELLOW)

            for attempt in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 1 –º–∏–Ω—É—Ç–∞
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(2)
                    result = sock.connect_ex((host, port))
                    sock.close()

                    if result == 0:
                        self.print_status(f"‚úÖ {service_name} –≥–æ—Ç–æ–≤", Colors.GREEN)
                        ready_services.append(service_name)
                        break
                except:
                    pass

                time.sleep(2)
                if (
                    attempt % 7 == 0 and attempt > 0
                ):  # –ö–∞–∂–¥—ã–µ 14 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    self.print_status(
                        f"–û–∂–∏–¥–∞–Ω–∏–µ {service_name}... ({attempt + 1}/30)", Colors.YELLOW
                    )
            else:
                self.print_status(f"‚ùå {service_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", Colors.RED)

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if ready_services:
            self.print_status(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(ready_services)}/{len(services)}",
                Colors.GREEN,
            )
            for service in ready_services:
                self.print_status(f"  ‚úÖ {service}", Colors.GREEN)

        if len(ready_services) < len(services):
            missing = [s[0] for s in services if s[0] not in ready_services]
            self.print_status(f"‚ö†Ô∏è  –ù–µ –≥–æ—Ç–æ–≤—ã: {', '.join(missing)}", Colors.YELLOW)
            self.print_status(
                "–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é", Colors.YELLOW
            )

    def start_fastapi(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        self.print_status("–ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", Colors.BLUE)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
        import socket

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.bind(("localhost", self.fastapi_port))
            sock.close()
        except OSError:
            self.print_status(f"‚ö†Ô∏è  –ü–æ—Ä—Ç {self.fastapi_port} –∑–∞–Ω—è—Ç", Colors.YELLOW)
            return False

        # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
        try:
            process = subprocess.Popen(
                [
                    sys.executable,
                    "-m",
                    "uvicorn",
                    "app.main:app",
                    "--reload",
                    "--host",
                    "0.0.0.0",
                    "--port",
                    str(self.fastapi_port),
                ],
                cwd=self.project_root.parent,
            )  # –ò–∑–º–µ–Ω–µ–Ω–æ: –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏

            self.processes.append(process)
            self.print_status("‚úÖ FastAPI –∑–∞–ø—É—â–µ–Ω", Colors.GREEN)
            return True

        except Exception as e:
            self.print_status(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI: {e}", Colors.RED)
            return False

    def print_system_info(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
        print(f"\n{Colors.BOLD}{Colors.CYAN}üìä –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞:{Colors.END}")
        print(
            f"{Colors.GREEN}üåê FastAPI:     http://localhost:{self.fastapi_port}{Colors.END}"
        )
        print(
            f"{Colors.GREEN}üìö API Docs:    http://localhost:{self.fastapi_port}/docs{Colors.END}"
        )
        print(
            f"{Colors.GREEN}üîç Health:      http://localhost:{self.fastapi_port}/healthz{Colors.END}"
        )
        print(
            f"{Colors.GREEN}üíæ MinIO API:   http://localhost:{self.minio_api_port}{Colors.END}"
        )
        print(
            f"{Colors.GREEN}üñ•Ô∏è  MinIO Console: http://localhost:{self.minio_console_port}{Colors.END}"
        )
        print(
            f"{Colors.GREEN}üóÑÔ∏è  PostgreSQL:  localhost:{self.postgres_port}{Colors.END}"
        )
        print(f"{Colors.GREEN}üî¥ Redis:       localhost:{self.redis_port}{Colors.END}")
        print(
            f"{Colors.GREEN}üìä pgAdmin:     http://localhost:{self.pgadmin_port}{Colors.END}"
        )

        print(f"\n{Colors.BOLD}{Colors.YELLOW}üîë –î–æ—Å—Ç—É–ø—ã:{Colors.END}")
        print(
            f"{Colors.YELLOW}MinIO - –õ–æ–≥–∏–Ω: minioadmin, –ü–∞—Ä–æ–ª—å: minioadmin{Colors.END}"
        )
        print(
            f"{Colors.YELLOW}pgAdmin - Email: admin@admin.com, –ü–∞—Ä–æ–ª—å: admin{Colors.END}"
        )

        print(f"\n{Colors.BOLD}{Colors.PURPLE}üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:{Colors.END}")
        print(
            f"{Colors.PURPLE}curl http://localhost:{self.fastapi_port}/healthz{Colors.END}"
        )
        print(
            f"{Colors.PURPLE}curl http://localhost:{self.fastapi_port}/api/v1/cdn/stats/cache{Colors.END}"
        )
        print(f"{Colors.PURPLE}docker-compose logs -f{Colors.END}")

        print(
            f"\n{Colors.BOLD}{Colors.CYAN}‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C{Colors.END}"
        )
        print()

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        self.print_status("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...", Colors.YELLOW)
        self.stop()
        sys.exit(0)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
        self.print_status("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...", Colors.YELLOW)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FastAPI
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
            except:
                process.kill()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã
        try:
            subprocess.run(
                ["docker-compose", "down"], cwd=self.project_root, capture_output=True
            )
            self.print_status("‚úÖ Docker —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.GREEN)
        except:
            pass

        self.print_status("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", Colors.GREEN)

    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É."""
        try:
            self.print_header()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if not self.check_dependencies():
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º Docker Desktop
            if not self.start_docker_desktop():
                self.print_status("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Docker —Å–µ—Ä–≤–∏—Å–æ–≤", Colors.YELLOW)
                docker_available = False
            else:
                docker_available = True

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            self.setup_directories()
            self.setup_env_file()

            # –ó–∞–ø—É—Å–∫–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Docker –¥–æ—Å—Ç—É–ø–µ–Ω
            if docker_available:
                if not self.start_docker_services():
                    self.print_status(
                        "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤", Colors.YELLOW
                    )
                    docker_available = False

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            self.wait_for_services()

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MinIO bucket –µ—Å–ª–∏ Docker –¥–æ—Å—Ç—É–ø–µ–Ω
            if docker_available:
                self.setup_minio_bucket()
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                self.switch_to_s3_storage()

            # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
            if not self.start_fastapi():
                return False

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.print_system_info()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, self.signal_handler)
            signal.signal(signal.SIGTERM, self.signal_handler)

            self.running = True

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while self.running:
                time.sleep(1)

        except KeyboardInterrupt:
            self.print_status("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...", Colors.YELLOW)
        except Exception as e:
            self.print_status(f"‚ùå –û—à–∏–±–∫–∞: {e}", Colors.RED)
        finally:
            self.stop()

        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    runner = SystemRunner()
    success = runner.run()

    if success:
        print(f"{Colors.GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ{Colors.END}")
    else:
        print(f"{Colors.RED}‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏{Colors.END}")
        sys.exit(1)


if __name__ == "__main__":
    main()
