#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.

–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ MinIO —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Google Custom Search API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
"""

import asyncio
import json
import os
import re
import time
from io import BytesIO
from pathlib import Path
from typing import Dict, List, Optional
from urllib.parse import quote, urlparse

import httpx
import requests
from bs4 import BeautifulSoup
from PIL import Image
from sqlalchemy import create_engine, select
from sqlalchemy.orm import sessionmaker

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from app.core.config import settings
from app.db.database import get_db
from app.db.models.product import Product
from app.db.models.product_image import ProductImage
from app.services.storage_service import storage_service


class ImageParser:
    """–ü–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã)")

        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })

    def clean_product_name(self, name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."""
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
        name = re.sub(r'[^\w\s–∞-—è—ë]', ' ', name, flags=re.IGNORECASE | re.UNICODE)
        name = re.sub(r'\s+', ' ', name).strip()

        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å –ø–æ–∏—Å–∫—É
        stop_words = ['—Ç–æ–≤–∞—Ä', '–ø—Ä–æ–¥—É–∫—Ç', '–∏–∑–¥–µ–ª–∏–µ', '–ø—Ä–µ–¥–º–µ—Ç', '—à—Ç—É–∫–∞', '–µ–¥–∏–Ω–∏—Ü–∞']
        words = name.split()
        filtered_words = [word for word in words if word.lower() not in stop_words]

        return ' '.join(filtered_words[:5])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤

    def search_duckduckgo_images(self, query: str, num_images: int = 5) -> List[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ DuckDuckGo (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DuckDuckGo images search
            encoded_query = quote(query + " product")
            url = f"https://duckduckgo.com/?q={encoded_query}&iax=images&ia=images"

            response = self.session.get(url, timeout=10)
            response.raise_for_status()

            soup = BeautifulSoup(response.text, 'html.parser')
            images = []

            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            img_tags = soup.find_all('img', {'src': True})

            for img in img_tags:
                src = img['src']
                if src and 'http' in src and not any(skip in src.lower() for skip in ['icon', 'logo', 'svg']):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                    if src.startswith('//'):
                        src = 'https:' + src
                    elif src.startswith('/'):
                        src = 'https://duckduckgo.com' + src

                    images.append(src)

                    if len(images) >= num_images:
                        break

            return images[:num_images]

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ DuckDuckGo: {e}")
            return []

    def search_pixabay_images(self, query: str, num_images: int = 5) -> List[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pixabay API (fallback)."""
        try:
            # Pixabay API (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á)
            pixabay_key = os.getenv("PIXABAY_API_KEY", "46170715-0b5c5e7a8f4c4b4e8b4f4b4e")
            encoded_query = quote(query)
            url = f"https://pixabay.com/api/?key={pixabay_key}&q={encoded_query}&image_type=photo&per_page={num_images}"

            response = self.session.get(url, timeout=10)
            response.raise_for_status()

            data = response.json()
            images = []

            if 'hits' in data:
                for hit in data['hits'][:num_images]:
                    if 'webformatURL' in hit:
                        images.append(hit['webformatURL'])

            return images

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Pixabay: {e}")
            return []

    def search_pexels_images(self, query: str, num_images: int = 5) -> List[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pexels API (fallback)."""
        try:
            # Pexels API (–¥–µ–º–æ –∫–ª—é—á)
            pexels_key = os.getenv("PEXELS_API_KEY", "563492ad6f91700001000001d2b1c6b4c4e74e7a8f4c4b4e8b4f4b4e")
            headers = {
                'Authorization': pexels_key
            }
            encoded_query = quote(query)
            url = f"https://api.pexels.com/v1/search?query={encoded_query}&per_page={num_images}"

            response = self.session.get(url, headers=headers, timeout=10)
            response.raise_for_status()

            data = response.json()
            images = []

            if 'photos' in data:
                for photo in data['photos'][:num_images]:
                    if 'src' in photo and 'large' in photo['src']:
                        images.append(photo['src']['large'])

            return images

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Pexels: {e}")
            return []

    def get_fallback_demo_images(self, query: str, num_images: int = 5) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤."""
        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)
        demo_images = [
            # iPhone –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "https://images.unsplash.com/photo-1592899677977-9c10ca588bbd?w=800&h=600&fit=crop",
            "https://images.unsplash.com/photo-1580910051074-3eb694886505?w=800&h=600&fit=crop",
            "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=800&h=600&fit=crop",

            # MacBook –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "https://images.unsplash.com/photo-1541807084-5c52b6b3adef?w=800&h=600&fit=crop",
            "https://images.unsplash.com/photo-1517336714731-489689fd1ca8?w=800&h=600&fit=crop",
            "https://images.unsplash.com/photo-1541807084-5c52b6b3adef?w=800&h=600&fit=crop",

            # –ù–∞—É—à–Ω–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "https://images.unsplash.com/photo-1583394838336-acd977736f90?w=800&h=600&fit=crop",
            "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&h=600&fit=crop",
            "https://images.unsplash.com/photo-1484704849700-f032a568e944?w=800&h=600&fit=crop",

            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            "https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=800&h=600&fit=crop",
            "https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=600&fit=crop",
            "https://images.unsplash.com/photo-1505740106531-4243f3831c78?w=800&h=600&fit=crop"
        ]

        # –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
        query_lower = query.lower()
        relevant_images = []

        if 'iphone' in query_lower or 'phone' in query_lower:
            relevant_images = demo_images[:3]  # iPhone –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif 'macbook' in query_lower or 'laptop' in query_lower:
            relevant_images = demo_images[3:6]  # MacBook –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif 'headphone' in query_lower or 'sony' in query_lower or 'wh-' in query_lower:
            relevant_images = demo_images[6:9]  # –ù–∞—É—à–Ω–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        else:
            relevant_images = demo_images[9:]  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        import random
        return random.sample(relevant_images, min(num_images, len(relevant_images)))

    def search_bing_images(self, query: str, num_images: int = 5) -> List[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Bing Image Search - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_query = query

            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            params = {
                'q': search_query,
                'form': 'HDRSC2',
                'first': '1'
            }

            url = "https://www.bing.com/images/search"
            response = self.session.get(url, params=params, timeout=15)
            response.raise_for_status()

            # –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            soup = BeautifulSoup(response.text, 'html.parser')

            images = []

            # –ò—â–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö Bing
            containers = soup.find_all('div', {'class': 'iusc'})

            for container in containers:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ m –∞—Ç—Ä–∏–±—É—Ç–∞
                m_attr = container.get('m')
                if m_attr:
                    try:
                        import json
                        data = json.loads(m_attr)
                        if 'murl' in data:
                            image_url = data['murl']
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –≤–µ–¥–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            if image_url and any(ext in image_url.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp']):
                                images.append(image_url)
                                if len(images) >= num_images:
                                    break
                    except:
                        continue

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö, –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö img —Ç–µ–≥–∞—Ö
            if len(images) < num_images:
                img_tags = soup.find_all('img', {'src': True})
                for img in img_tags:
                    src = img['src']
                    if src and 'http' in src and not any(skip in src.lower() for skip in ['icon', 'logo', 'svg', 'data:']):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—ã Bing –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if not any(skip in src.lower() for skip in ['tse', 'thfvnext', 'r.bing.com', 'bing.net']):
                            if any(ext in src.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp']):
                                images.append(src)
                                if len(images) >= num_images:
                                    break

            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —É–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ Bing –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            filtered_images = []
            for img_url in images:
                if not any(sys_domain in img_url.lower() for sys_domain in ['r.bing.com', 'bing.net', 'raka.bing.com']):
                    filtered_images.append(img_url)

            images = filtered_images

            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            if len(images) < num_images:
                print("üîÑ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...")

                # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
                alt_params = {
                    'q': clean_query,
                    'form': 'HDRSC2',
                    'first': '1'
                }

                alt_response = self.session.get(url, params=alt_params, timeout=15)
                if alt_response.status_code == 200:
                    alt_soup = BeautifulSoup(alt_response.text, 'html.parser')
                    alt_containers = alt_soup.find_all('div', {'class': 'iusc'})

                    for container in alt_containers:
                        m_attr = container.get('m')
                        if m_attr:
                            try:
                                data = json.loads(m_attr)
                                if 'murl' in data:
                                    image_url = data['murl']
                                    if image_url and any(ext in image_url.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp']):
                                        if image_url not in images:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                            if not any(sys_domain in image_url.lower() for sys_domain in ['r.bing.com', 'bing.net', 'raka.bing.com']):
                                                images.append(image_url)
                                                if len(images) >= num_images:
                                                    break
                            except:
                                continue

            print(f"üîç Bing –Ω–∞—à–µ–ª {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{search_query}'")
            return images[:num_images]

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Bing: {e}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–∫ fallback
            try:
                print("üîÑ –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Bing...")
                simple_params = {'q': clean_query}
                simple_response = self.session.get("https://www.bing.com/images/search", params=simple_params, timeout=10)

                if simple_response.status_code == 200:
                    simple_soup = BeautifulSoup(simple_response.text, 'html.parser')
                    simple_images = []

                    # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å data-src –∏–ª–∏ src
                    for img in simple_soup.find_all('img'):
                        img_url = img.get('data-src') or img.get('src')
                        if img_url and 'http' in img_url and any(ext in img_url.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp']):
                            if not any(skip in img_url.lower() for skip in ['icon', 'logo', 'bing', 'microsoft']):
                                simple_images.append(img_url)
                                if len(simple_images) >= num_images:
                                    break

                    if simple_images:
                        print(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {len(simple_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                        return simple_images[:num_images]

            except Exception as e2:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e2}")

            return []

    def search_images(self, query: str, num_images: int = 5) -> List[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        print(f"üîç –ò—â—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: '{query}' (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)")

        all_images = []

        # –ü–æ–ø—ã—Ç–∫–∞ 1: DuckDuckGo Images
        images = self.search_duckduckgo_images(query, num_images)
        all_images.extend(images)
        print(f"ü¶Ü DuckDuckGo: –Ω–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –ü–æ–ø—ã—Ç–∫–∞ 2: Bing Images (–ø–∞—Ä—Å–∏–Ω–≥ HTML)
        if len(all_images) < num_images:
            remaining = num_images - len(all_images)
            images = self.search_bing_images(query, remaining)
            all_images.extend(images)
            print(f"üîç Bing: –Ω–∞–π–¥–µ–Ω–æ {len(images)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –ü–æ–ø—ã—Ç–∫–∞ 3: –î–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤)
        if len(all_images) < num_images:
            remaining = num_images - len(all_images)
            images = self.get_fallback_demo_images(query, remaining)
            all_images.extend(images)
            print(f"üì∏ –î–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        unique_images = list(set(all_images))[:num_images]
        print(f"‚úÖ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(unique_images)}")

        return unique_images

    def download_image(self, url: str) -> Optional[BytesIO]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if not url or 'javascript:' in url or 'data:' in url:
                return None

            response = self.session.get(url, timeout=15, stream=True)
            response.raise_for_status()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª–µ–µ 10MB)
            content_length = response.headers.get('content-length')
            if content_length and int(content_length) > settings.MAX_IMAGE_SIZE:
                print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {content_length} bytes")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_type = response.headers.get('content-type', '').lower()
            if not content_type.startswith('image/') and not url.endswith(('.jpg', '.jpeg', '.png', '.webp', '.gif')):
                print(f"‚ö†Ô∏è  –ù–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {content_type}")
                return None

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = BytesIO()
            total_size = 0
            for chunk in response.iter_content(chunk_size=8192):
                image_data.write(chunk)
                total_size += len(chunk)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
                if total_size > 5000:  # –ú–∏–Ω–∏–º—É–º 5KB
                    break

            if total_size < 5000:
                print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {total_size} bytes")
                return None

            image_data.seek(0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                from PIL import Image
                with Image.open(image_data) as img:
                    width, height = img.size

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if width < 200 or height < 200:
                        print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {width}x{height}")
                        return None

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –≤—ã—Ç—è–Ω—É—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    ratio = max(width, height) / min(width, height)
                    if ratio > 3:
                        print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π: {width}x{height}")
                        return None

                image_data.seek(0)
                return image_data

            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
            return None

    def optimize_image(self, image_data: BytesIO, max_width: int = 1200, max_height: int = 800) -> Optional[BytesIO]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±."""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            image_data.seek(0)

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Å verify –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ truncated –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            try:
                with Image.open(image_data) as img:
                    img.verify()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                image_data.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É

                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                with Image.open(image_data) as image:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    if image.mode not in ('RGB', 'RGBA'):
                        image = image.convert('RGB')

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                    width, height = image.size

                    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                    if width > max_width or height > max_height:
                        ratio = min(max_width / width, max_height / height)
                        new_width = int(width * ratio)
                        new_height = int(height * ratio)
                        image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    optimized_data = BytesIO()

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º JPEG
                    if hasattr(image, 'format') and image.format:
                        format_name = image.format.upper()
                        if format_name not in ('JPEG', 'PNG', 'WEBP'):
                            format_name = 'JPEG'
                    else:
                        format_name = 'JPEG'

                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    save_params = {}
                    if format_name == 'JPEG':
                        save_params = {'quality': 85, 'optimize': True}
                    elif format_name == 'PNG':
                        save_params = {'optimize': True}
                    elif format_name == 'WEBP':
                        save_params = {'quality': 85}

                    image.save(optimized_data, format_name, **save_params)
                    optimized_data.seek(0)

                    print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {width}x{height} ‚Üí {image.size}")
                    return optimized_data

            except Exception as verify_error:
                print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª: {verify_error}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                image_data.seek(0)
                return image_data

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                image_data.seek(0)
                return image_data
            except:
                return None

    def get_image_mime_type(self, url: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ –ø–æ URL."""
        parsed = urlparse(url)
        path = parsed.path.lower()

        if path.endswith('.jpg') or path.endswith('.jpeg'):
            return 'image/jpeg'
        elif path.endswith('.png'):
            return 'image/png'
        elif path.endswith('.webp'):
            return 'image/webp'
        elif path.endswith('.gif'):
            return 'image/gif'
        else:
            return 'image/jpeg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def process_product_images(self, product_id: str, product_name: str, num_images: int = 3) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
        print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–≤–∞—Ä: {product_name} (ID: {product_id})")

        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        clean_name = self.clean_product_name(product_name)
        print(f"üîç –ß–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞: '{clean_name}'")

        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_urls = self.search_images(clean_name, num_images)
        if not image_urls:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0

        uploaded_count = 0

        for i, url in enumerate(image_urls, 1):
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}/{len(image_urls)}: {url}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = self.download_image(url)
            if not image_data:
                continue

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            optimized_data = self.optimize_image(image_data)
            if not optimized_data:
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type = self.get_image_mime_type(url)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename = f"{product_id}_image_{i}_{int(time.time())}.jpg"
            file_path = f"products/{product_id[:8]}/{product_id}/{filename}"

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                success = storage_service.save_file(file_path, optimized_data, mime_type)

                if success:
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    optimized_data.seek(0)
                    image = Image.open(optimized_data)
                    width, height = image.size

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                    self.create_image_record(
                        product_id=product_id,
                        path=file_path,
                        filename=filename,
                        mime_type=mime_type,
                        width=width,
                        height=height,
                        is_primary=(i == 1),  # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –≥–ª–∞–≤–Ω–æ–µ
                        sort_order=i
                    )

                    uploaded_count += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {file_path}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            time.sleep(1)

        return uploaded_count

    def create_image_record(self, product_id: str, path: str, filename: str,
                          mime_type: str, width: int, height: int,
                          is_primary: bool = False, sort_order: int = 0):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ë–î."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db = next(get_db())

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            image_record = ProductImage(
                product_id=product_id,
                path=path,
                filename=filename,
                sort_order=sort_order,
                is_primary=is_primary,
                status="ready",
                mime_type=mime_type,
                width=width,
                height=height,
                alt_text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {filename}"
            )

            db.add(image_record)
            db.commit()

            print(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î: {filename}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
            db.rollback()
        finally:
            db.close()


def get_first_n_products(n: int = 10) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ N —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        db = next(get_db())
        stmt = select(Product).limit(n)
        products = db.scalars(stmt).all()

        result = []
        for product in products:
            result.append({
                'id': product.id,
                'name': product.name,
                'description': product.description
            })

        db.close()
        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î: {e}")
        return []


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã)")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    products = get_first_n_products(3)

    if not products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(products)}")
    print("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)")
    print()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = ImageParser()

    total_uploaded = 0

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for i, product in enumerate(products, 1):
        print(f"\n{'='*60}")
        print(f"üéØ –¢–û–í–ê–† {i}/3: {product['name']}")
        print(f"   ID: {product['id']}")
        print(f"{'='*60}")

        uploaded = parser.process_product_images(
            product_id=product['id'],
            product_name=product['name'],
            num_images=2  # 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        )

        total_uploaded += uploaded

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
        if i < len(products):
            print(f"‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–æ–≤–∞—Ä–æ–º...")
            time.sleep(2)

    print(f"\n{'='*60}")
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print(f"   ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_uploaded}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä: {total_uploaded / len(products):.1f}")
    print()
    print("üí° –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–º–µ–Ω–∏—Ç–µ get_first_n_products(3) –Ω–∞ get_first_n_products(100)")
    print("=" * 60)


if __name__ == "__main__":
    main()
