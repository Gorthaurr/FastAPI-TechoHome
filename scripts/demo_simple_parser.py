#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ API –∫–ª—é—á–µ–π,
–∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML.
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É ./demo_images/
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from image_parser import ImageParser


def demo_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–ò–°–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 50)

    parser = ImageParser()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    test_products = [
        "iPhone 15 Pro Max",
        "MacBook Air M3",
        "Sony WH-1000XM5"
    ]

    for product in test_products:
        print(f"\nüéØ –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: '{product}'")
        print("-" * 40)

        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = parser.search_images(product, 2)

        if images:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
            for i, url in enumerate(images, 1):
                print(f"   {i}. {url}")
        else:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        print()


def demo_download():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤."""
    print("üì• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–ò–°–ö–ê –ò –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –¢–û–í–ê–†–û–í")
    print("=" * 60)
    print("üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: ./demo_images/")
    print("üéØ –ü–∞—Ä—Å–µ—Ä –Ω–∞–π–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º")
    print()

    parser = ImageParser()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    test_products = [
        "iPhone 15 Pro Max",
        "MacBook Air M3",
        "Sony WH-1000XM5"
    ]

    for product in test_products:
        print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä: '{product}'")
        print("-" * 40)

        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        images = parser.search_images(product, 2)

        if images:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for i, image_url in enumerate(images[:1]):  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ
                print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")

                image_data = parser.download_image(image_url)
                if image_data:
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                    size = len(image_data.getvalue())
                    print(f"üìè –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")

                    # –ü—Ä–æ–±—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        optimized = parser.optimize_image(image_data)
                        file_to_save = optimized if optimized else image_data

                        if optimized:
                            optimized_size = len(optimized.getvalue())
                            compression_ratio = optimized_size / size
                            print(f"üñºÔ∏è  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {optimized_size} –±–∞–π—Ç ({compression_ratio:.1f}x)")
                        else:
                            print("‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                            file_to_save = image_data

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ)
                        safe_name = "".join(c for c in product if c.isalnum() or c in (' ', '-')).rstrip()
                        safe_name = safe_name.replace(' ', '_')
                        filename = f"{safe_name}_demo.jpg"
                        filepath = f"./demo_images/{filename}"

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        with open(filepath, 'wb') as f:
                            f.write(file_to_save.getvalue())

                        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                        print(f"   üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(filepath)}")
                        print(f"   üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(file_to_save.getvalue())} –±–∞–π—Ç")

                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        try:
                            safe_name = "".join(c for c in product if c.isalnum() or c in (' ', '-')).rstrip()
                            safe_name = safe_name.replace(' ', '_')
                            filename = f"{safe_name}_original.jpg"
                            filepath = f"./demo_images/{filename}"

                            with open(filepath, 'wb') as f:
                                f.write(image_data.getvalue())

                            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª: {filepath}")
                            print(f"   üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(filepath)}")

                        except Exception as e2:
                            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e2}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                print("-" * 30)
        else:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("-" * 30)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è."""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–ê–†–°–ï–†–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("–¢–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ (–±–µ–∑ API)")
    print("=" * 60)

    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        demo_search()

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        demo_download()

        print("\n" + "=" * 60)
        print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        demo_dir = "./demo_images"
        if os.path.exists(demo_dir):
            files = os.listdir(demo_dir)
            if files:
                print("üìÇ –°–û–•–†–ê–ù–ï–ù–ù–´–ï –§–ê–ô–õ–´:")
                for file in files:
                    filepath = os.path.join(demo_dir, file)
                    size = os.path.getsize(filepath)
                    print(f"   üìÑ {file} ({size} –±–∞–π—Ç)")
                    print(f"      üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(filepath)}")
                print()

        print("üí° –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ü–ê–†–°–ï–†–ê:")
        print("   ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ HTTP –ø–∞—Ä—Å–∏–Ω–≥")
        print("   ‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bing")
        print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ –∫–∞—á–µ—Å—Ç–≤–æ")
        print("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –≤ ./demo_images/")
        print()
        print("üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:")
        print("   python scripts/image_parser.py")
        print("=" * 60)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
