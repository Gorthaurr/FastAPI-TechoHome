#!/usr/bin/env python3
"""
PostgreSQL Database Checker
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL

Usage:
    python test/check_postgres.py [table_name]
    
Examples:
    python test/check_postgres.py                    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    python test/check_postgres.py products           # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É products
    python test/check_postgres.py product_images     # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É product_images
    python test/check_postgres.py categories         # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É categories
"""

import os
import sys
import argparse
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# Add project path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from app.core.config import settings


class PostgresChecker:
    def __init__(self):
        self.engine = create_engine(settings.DATABASE_URL)
        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)
        
    def get_connection_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text("SELECT version()"))
                version = result.scalar()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
                print(f"üìä –í–µ—Ä—Å–∏—è: {version}")
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return False
    
    def get_table_list(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
        try:
            with self.engine.connect() as conn:
                query = text("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    ORDER BY table_name
                """)
                result = conn.execute(query)
                tables = [row[0] for row in result]
                return tables
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
            return []
    
    def get_table_stats(self, table_name):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            with self.engine.connect() as conn:
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                count_query = text(f"SELECT COUNT(*) FROM {table_name}")
                count_result = conn.execute(count_query)
                count = count_result.scalar()
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
                structure_query = text("""
                    SELECT column_name, data_type, is_nullable
                    FROM information_schema.columns
                    WHERE table_name = :table_name
                    ORDER BY ordinal_position
                """)
                structure_result = conn.execute(structure_query, {"table_name": table_name})
                columns = [(row.column_name, row.data_type, row.is_nullable) for row in structure_result]
                
                return count, columns
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return 0, []
    
    def get_sample_data(self, table_name, limit=5):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            with self.engine.connect() as conn:
                # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
                columns_query = text("""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = :table_name
                    ORDER BY ordinal_position
                """)
                columns_result = conn.execute(columns_query, {"table_name": table_name})
                columns = [row.column_name for row in columns_result]
                
                if not columns:
                    return []
                
                # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                data_query = text(f"SELECT * FROM {table_name} LIMIT {limit}")
                data_result = conn.execute(data_query)
                
                sample_data = []
                for row in data_result:
                    row_dict = {}
                    for i, column in enumerate(columns):
                        value = row[i]
                        # –û–±—Ä–µ–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        if isinstance(value, str) and len(value) > 100:
                            value = value[:100] + "..."
                        row_dict[column] = value
                    sample_data.append(row_dict)
                
                return sample_data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return []
    
    def check_specific_table(self, table_name):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
        print(f"\n{'='*60}")
        print(f"üìã –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´: {table_name.upper()}")
        print(f"{'='*60}")
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        count, columns = self.get_table_stats(table_name)
        
        if count == 0 and not columns:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count:,}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print(f"\nüèóÔ∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
        print(f"{'–ö–æ–ª–æ–Ω–∫–∞':<20} {'–¢–∏–ø':<15} {'NULL':<8}")
        print(f"{'-'*20} {'-'*15} {'-'*8}")
        for col_name, col_type, is_nullable in columns:
            nullable = "YES" if is_nullable == "YES" else "NO"
            print(f"{col_name:<20} {col_type:<15} {nullable:<8}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if count > 0:
            sample_data = self.get_sample_data(table_name, 3)
            if sample_data:
                print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏):")
                for i, row in enumerate(sample_data, 1):
                    print(f"\n--- –ó–∞–ø–∏—Å—å {i} ---")
                    for key, value in row.items():
                        print(f"  {key}: {value}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        if table_name == "products":
            self.check_products_specific()
        elif table_name == "product_images":
            self.check_product_images_specific()
        elif table_name == "categories":
            self.check_categories_specific()
    
    def check_products_specific(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã products"""
        try:
            with self.engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
                price_query = text("""
                    SELECT 
                        MIN(price_cents) as min_price,
                        MAX(price_cents) as max_price,
                        AVG(price_cents) as avg_price,
                        COUNT(*) as total_products
                    FROM products
                """)
                price_result = conn.execute(price_query).fetchone()
                
                print(f"\nüí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω:")
                print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price_result.min_price:,} –∫–æ–ø–µ–µ–∫")
                print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price_result.max_price:,} –∫–æ–ø–µ–µ–∫")
                print(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {price_result.avg_price:,.0f} –∫–æ–ø–µ–µ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                category_query = text("""
                    SELECT c.slug, COUNT(p.id) as product_count
                    FROM products p
                    JOIN categories c ON p.category_id = c.id
                    GROUP BY c.id, c.slug
                    ORDER BY product_count DESC
                """)
                category_result = conn.execute(category_query)
                
                print(f"\nüìÇ –ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for row in category_result:
                    print(f"  {row.slug}: {row.product_count:,} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ products: {e}")
    
    def check_product_images_specific(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã product_images"""
        try:
            with self.engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
                path_query = text("""
                    SELECT 
                        COUNT(*) as total_images,
                        COUNT(CASE WHEN path LIKE 'products/%' THEN 1 END) as minio_images,
                        COUNT(CASE WHEN path LIKE 'images/%' THEN 1 END) as local_images,
                        COUNT(CASE WHEN path NOT LIKE 'products/%' AND path NOT LIKE 'images/%' THEN 1 END) as other_paths
                    FROM product_images
                """)
                path_result = conn.execute(path_query).fetchone()
                
                print(f"\nüñºÔ∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
                print(f"  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {path_result.total_images:,}")
                print(f"  –í MinIO (products/): {path_result.minio_images:,}")
                print(f"  –õ–æ–∫–∞–ª—å–Ω—ã–µ (images/): {path_result.local_images:,}")
                print(f"  –î—Ä—É–≥–∏–µ –ø—É—Ç–∏: {path_result.other_paths:,}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
                size_query = text("""
                    SELECT 
                        MIN(file_size) as min_size,
                        MAX(file_size) as max_size,
                        AVG(file_size) as avg_size
                    FROM product_images
                    WHERE file_size IS NOT NULL
                """)
                size_result = conn.execute(size_query).fetchone()
                
                if size_result.min_size:
                    print(f"\nüìè –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
                    print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {size_result.min_size:,} –±–∞–π—Ç")
                    print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {size_result.max_size:,} –±–∞–π—Ç")
                    print(f"  –°—Ä–µ–¥–Ω–∏–π: {size_result.avg_size:,.0f} –±–∞–π—Ç")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ product_images: {e}")
    
    def check_categories_specific(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã categories"""
        try:
            with self.engine.connect() as conn:
                # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                query = text("""
                    SELECT c.id, c.slug, COUNT(p.id) as product_count
                    FROM categories c
                    LEFT JOIN products p ON c.id = p.category_id
                    GROUP BY c.id, c.slug
                    ORDER BY product_count DESC
                """)
                result = conn.execute(query)
                
                print(f"\nüìÇ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for row in result:
                    print(f"  ID: {row.id}, Slug: {row.slug}, –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {row.product_count:,}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ categories: {e}")
    
    def show_general_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º"""
        print(f"\n{'='*60}")
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print(f"{'='*60}")
        
        tables = self.get_table_list()
        if not tables:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü")
            return
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        total_stats = {}
        for table in tables:
            count, _ = self.get_table_stats(table)
            total_stats[table] = count
            print(f"  {table}: {count:,} –∑–∞–ø–∏—Å–µ–π")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_records = sum(total_stats.values())
        print(f"\nüìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if total_stats.get('products', 0) > 0:
            print(f"  - –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: python test/check_postgres.py products")
        if total_stats.get('product_images', 0) > 0:
            print(f"  - –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: python test/check_postgres.py product_images")
        if total_stats.get('categories', 0) > 0:
            print(f"  - –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: python test/check_postgres.py categories")
    
    def run(self, table_name=None):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"""
        print(f"üîç PostgreSQL Database Checker")
        print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.get_connection_info():
            return
        
        if table_name:
            self.check_specific_table(table_name)
        else:
            self.show_general_stats()


def main():
    parser = argparse.ArgumentParser(description='PostgreSQL Database Checker')
    parser.add_argument('table', nargs='?', help='–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏')
    args = parser.parse_args()
    
    try:
        checker = PostgresChecker()
        checker.run(args.table)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
