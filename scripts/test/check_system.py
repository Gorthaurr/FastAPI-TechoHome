#!/usr/bin/env python3
"""
System Health Checker
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã

Usage:
    python test/check_system.py [component]
    
Examples:
    python test/check_system.py                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É
    python test/check_system.py postgres           # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ PostgreSQL
    python test/check_system.py minio              # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ MinIO
    python test/check_system.py fastapi            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ FastAPI
"""

import os
import sys
import argparse
import requests
import subprocess
from datetime import datetime
from sqlalchemy import create_engine, text
from minio import Minio
from minio.error import S3Error

# Add project path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from app.core.config import settings


class SystemChecker:
    def __init__(self):
        self.results = {}
        
    def check_postgres(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å PostgreSQL"""
        print(f"\n{'='*50}")
        print(f"üêò –ü–†–û–í–ï–†–ö–ê POSTGRESQL")
        print(f"{'='*50}")
        
        try:
            engine = create_engine(settings.DATABASE_URL)
            with engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                version_result = conn.execute(text("SELECT version()"))
                version = version_result.scalar()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –£—Å–ø–µ—à–Ω–æ")
                print(f"üìä –í–µ—Ä—Å–∏—è: {version.split(',')[0]}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
                tables_result = conn.execute(text("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public'
                """))
                tables = [row[0] for row in tables_result]
                print(f"üìã –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {len(tables)}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                main_tables = ['products', 'categories', 'product_images']
                for table in main_tables:
                    if table in tables:
                        count_result = conn.execute(text(f"SELECT COUNT(*) FROM {table}"))
                        count = count_result.scalar()
                        print(f"  {table}: {count:,} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        print(f"  ‚ùå {table}: –ù–ï –ù–ê–ô–î–ï–ù–ê")
                
                self.results['postgres'] = {
                    'status': 'OK',
                    'tables': len(tables),
                    'version': version.split(',')[0]
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.results['postgres'] = {'status': 'ERROR', 'error': str(e)}
    
    def check_minio(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å MinIO"""
        print(f"\n{'='*50}")
        print(f"üì¶ –ü–†–û–í–ï–†–ö–ê MINIO")
        print(f"{'='*50}")
        
        try:
            client = Minio(
                "localhost:9002",
                access_key="minioadmin",
                secret_key="minioadmin",
                secure=False
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            buckets = list(client.list_buckets())
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –£—Å–ø–µ—à–Ω–æ")
            print(f"üìä Buckets –Ω–∞–π–¥–µ–Ω–æ: {len(buckets)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ product-images bucket
            product_images_bucket = None
            for bucket in buckets:
                if bucket.name == 'product-images':
                    product_images_bucket = bucket
                    break
            
            if product_images_bucket:
                print(f"‚úÖ Bucket 'product-images': –ù–∞–π–¥–µ–Ω")
                
                # –ü–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                objects = list(client.list_objects('product-images', recursive=True))
                print(f"üìä –û–±—ä–µ–∫—Ç–æ–≤ –≤ product-images: {len(objects):,}")
                
                # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞
                total_size = sum(obj.size for obj in objects)
                size_mb = total_size / (1024 * 1024)
                print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
                
                self.results['minio'] = {
                    'status': 'OK',
                    'buckets': len(buckets),
                    'product_images_objects': len(objects),
                    'total_size_mb': size_mb
                }
            else:
                print(f"‚ùå Bucket 'product-images': –ù–ï –ù–ê–ô–î–ï–ù")
                self.results['minio'] = {'status': 'WARNING', 'error': 'product-images bucket not found'}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.results['minio'] = {'status': 'ERROR', 'error': str(e)}
    
    def check_fastapi(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        print(f"\n{'='*50}")
        print(f"üöÄ –ü–†–û–í–ï–†–ö–ê FASTAPI")
        print(f"{'='*50}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            response = requests.get("http://localhost:8000/docs", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:8000")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                endpoints = [
                    ("/api/v1/products", "–ü—Ä–æ–¥—É–∫—Ç—ã"),
                    ("/api/v1/categories", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                    ("/api/v1/products/images", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                ]
                
                for endpoint, name in endpoints:
                    try:
                        resp = requests.get(f"http://localhost:8000{endpoint}", timeout=3)
                        if resp.status_code in [200, 404]:  # 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                            print(f"  ‚úÖ {name}: {resp.status_code}")
                        else:
                            print(f"  ‚ö†Ô∏è  {name}: {resp.status_code}")
                    except:
                        print(f"  ‚ùå {name}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                self.results['fastapi'] = {'status': 'OK', 'port': 8000}
                
            else:
                print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                self.results['fastapi'] = {'status': 'ERROR', 'error': f'HTTP {response.status_code}'}
                
        except requests.exceptions.ConnectionError:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            self.results['fastapi'] = {'status': 'ERROR', 'error': 'Connection refused'}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.results['fastapi'] = {'status': 'ERROR', 'error': str(e)}
    
    def check_docker(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
        print(f"\n{'='*50}")
        print(f"üê≥ –ü–†–û–í–ï–†–ö–ê DOCKER")
        print(f"{'='*50}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            result = subprocess.run(
                ["docker", "ps", "--format", "table {{.Names}}\t{{.Status}}\t{{.Ports}}"],
                capture_output=True, text=True, timeout=10
            )
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) > 1:  # –ï—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    containers = lines[1:]
                    print(f"‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω")
                    print(f"üìä –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: {len(containers)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                    required_containers = ['postgres', 'minio', 'redis']
                    for container in containers:
                        if container.strip():
                            parts = container.split('\t')
                            if len(parts) >= 2:
                                name = parts[0]
                                status = parts[1]
                                ports = parts[2] if len(parts) > 2 else ""
                                
                                if any(req in name.lower() for req in required_containers):
                                    print(f"  ‚úÖ {name}: {status}")
                                    if ports:
                                        print(f"    –ü–æ—Ä—Ç: {ports}")
                                else:
                                    print(f"  ‚ÑπÔ∏è  {name}: {status}")
                    
                    self.results['docker'] = {'status': 'OK', 'containers': len(containers)}
                else:
                    print(f"‚ÑπÔ∏è  –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ—Ç")
                    self.results['docker'] = {'status': 'WARNING', 'containers': 0}
            else:
                print(f"‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.results['docker'] = {'status': 'ERROR', 'error': 'Docker not available'}
                
        except subprocess.TimeoutExpired:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Docker")
            self.results['docker'] = {'status': 'ERROR', 'error': 'Timeout'}
        except FileNotFoundError:
            print(f"‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.results['docker'] = {'status': 'ERROR', 'error': 'Docker not installed'}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.results['docker'] = {'status': 'ERROR', 'error': str(e)}
    
    def generate_summary(self):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print(f"\n{'='*60}")
        print(f"üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"{'='*60}")
        
        total_components = len(self.results)
        ok_components = sum(1 for r in self.results.values() if r['status'] == 'OK')
        error_components = sum(1 for r in self.results.values() if r['status'] == 'ERROR')
        warning_components = sum(1 for r in self.results.values() if r['status'] == 'WARNING')
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total_components}")
        print(f"  ‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: {ok_components}")
        print(f"  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_components}")
        print(f"  ‚ùå –û—à–∏–±–∫–∏: {error_components}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
        for component, result in self.results.items():
            status_icon = "‚úÖ" if result['status'] == 'OK' else "‚ö†Ô∏è" if result['status'] == 'WARNING' else "‚ùå"
            print(f"  {status_icon} {component.upper()}: {result['status']}")
            if 'error' in result:
                print(f"    –û—à–∏–±–∫–∞: {result['error']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if error_components > 0:
            print(f"  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏")
            print(f"  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        
        if 'postgres' in self.results and self.results['postgres']['status'] == 'OK':
            print(f"  - –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: python test/check_postgres.py")
        
        if 'minio' in self.results and self.results['minio']['status'] == 'OK':
            print(f"  - –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ MinIO: python test/check_minio.py")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        if error_components == 0 and warning_components == 0:
            print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
        elif error_components == 0:
            print(f"\n‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
        else:
            print(f"\n‚ùå –°–ò–°–¢–ï–ú–ê –ò–ú–ï–ï–¢ –ü–†–û–ë–õ–ï–ú–´")
    
    def run(self, component=None):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"""
        print(f"üîç System Health Checker")
        print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if component is None or component == 'postgres':
            self.check_postgres()
        
        if component is None or component == 'minio':
            self.check_minio()
        
        if component is None or component == 'fastapi':
            self.check_fastapi()
        
        if component is None or component == 'docker':
            self.check_docker()
        
        if component is None:
            self.generate_summary()


def main():
    parser = argparse.ArgumentParser(description='System Health Checker')
    parser.add_argument('component', nargs='?', choices=['postgres', 'minio', 'fastapi', 'docker'], 
                       help='–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ)')
    args = parser.parse_args()
    
    try:
        checker = SystemChecker()
        checker.run(args.component)
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
